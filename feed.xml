<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://urishx.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://urishx.github.io/" rel="alternate" type="text/html" /><updated>2020-12-16T17:54:20+00:00</updated><id>https://urishx.github.io/feed.xml</id><title type="html">Uri Sh.</title><subtitle>A portfolio centered site with a blog, to feature my adventures and projects in  making, programming, and engineering. Built in Jekyll, to be served from Github pages.
</subtitle><author><name>Uri Shani</name><email>urish@urishx.com</email></author><entry><title type="html">Customizing Jekyll&amp;#8217;s Default Theme</title><link href="https://urishx.github.io/2020/12/16/Customizing-Jekyll's-default-theme.html" rel="alternate" type="text/html" title="Customizing Jekyll&amp;#8217;s Default Theme" /><published>2020-12-16T00:00:00+00:00</published><updated>2020-12-16T00:00:00+00:00</updated><id>https://urishx.github.io/2020/12/16/Customizing-Jekyll's-default-theme</id><content type="html" xml:base="https://urishx.github.io/2020/12/16/Customizing-Jekyll's-default-theme.html">&lt;p&gt;Jekyll installs with a nice, clean theme, called &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;. While there are &lt;em&gt;a lot&lt;/em&gt; of nice themes out there, I had both a clear view in my head of what I wanted to accomplish, and ample time thanks to CoVid19. So, armed with &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima’s&lt;/a&gt; source and &lt;a href=&quot;https://jekyllrb.com/docs/themes/&quot;&gt;Jekyll’s documentation&lt;/a&gt;, I decided to have a go with modifying the theme a bit, and in this post I’ll try to outline the way I went about it.
&lt;!--more--&gt;
I started off with the latest version of the &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;, even though it’s not published as a stable version, and is not what you get ‘out of the box’ when you get when you start a new site with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new &amp;lt;PATH&amp;gt;&lt;/code&gt; command. The main reason for that was that I had more of a desire for understanding how Jekyll themes were built, rather than a ‘getting the job done’ approach. So, I cloned the theme from its Github repository, and started to modify the way things looked and felt, to better fit my desired look and feel. If you’d like to follow along, you would need to change your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; to point to Minima’s Github repository, like so:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &quot;minima&quot;, :github =&amp;gt; 'jekyll/minima' # github v.3.0, latest build is 2.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Set your theme on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt; from the command line.&lt;/p&gt;
&lt;h3 id=&quot;design-goals&quot;&gt;Design goals&lt;/h3&gt;
&lt;p&gt;I wanted my site to maintain the general look and feel of my existing WordPress blog, which uses the WordPress team’s &lt;a href=&quot;https://wordpress.org/themes/twentythirteen/&quot;&gt;Twentythirteen theme&lt;/a&gt;. &lt;br /&gt;
&lt;img src=&quot;/assets/img/wp_blog_snapshot_211020.png&quot; alt=&quot;My existing WordPress blog&quot; class=&quot;post-block-image&quot; /&gt; &lt;em class=&quot;post-image-desc&quot;&gt;My existing WordPress blog&lt;/em&gt; &lt;br /&gt;
Starting with the general layout of this theme, I wanted to have a header that will showcase the site’s name, some subtitle with the site’s motto, a logo, and to have all that in front of some colorful banner. I grabbed the banner straight from the WP theme I was using, re-designed my site’s logo, and started working on the layout.&lt;/p&gt;
&lt;h2 id=&quot;modifying-minima&quot;&gt;Modifying Minima&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima’s&lt;/a&gt; latest (unreleased) version, v.3.0, has got some nice features for easy customization. It imports some empty files while rendering both the theme’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default.html&lt;/code&gt; layout as well when compiling &lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt;) files. This complements Jekyll’s [theme building process]](https://jekyllrb.com/docs/themes/) nicely, as it allows the user to only modify what’s needed, without needing to copy and paste whole files. I found out that worked great with styling, but needed to make quite a few changes in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; HTML files, since there was no easy way for changing the page layouts themselves without that. &lt;br /&gt;
You can click on the filename in the headings to go to the file the paragraph describes.&lt;/p&gt;
&lt;h3 id=&quot;modifying-_includes&quot;&gt;Modifying &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;custom-headhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/custom-head.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-head.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This file is really all you need to change if all you want is a slightly different look and feel, and some basic branding. This file is included in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section in the generated site, so including a favicon, for example, is perfect here. I decided to change the fonts, so I grabbed the cdn link from &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google fonts&lt;/a&gt; for two fonts I like (and used on my old site) - &lt;a href=&quot;https://fonts.google.com/specimen/Alef?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=alef&quot;&gt;Alef&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Tinos?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=tinos#standard-styles&quot;&gt;Tinos&lt;/a&gt;. These two fonts were originally selected since they both support Hebrew as well as English (and other European languages), though I don’t intend to implement Hebrew on this site in the near future. I just sorta got used to them in my old site, and decided to keep them. &lt;br /&gt;
Those fonts will simply override Minima’s default font, by reassigning some variables in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/minma/custom-variables.scss&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;headerhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/header.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Starting off from the top of the page, the branding for my site consists of a banner, which features my name, a subtitle, the site’s logo, and a navigation bar. Those are all inserted through &lt;a href=&quot;https://jekyllrb.com/docs/liquid/&quot;&gt;Liquid&lt;/a&gt; tags, pulled from either Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, or from the Jekyll’s structure. &lt;br /&gt;
The banner itself is a css background, using Liquid to insert a relative URL from the site’s assets folder:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-image: url('{{ site.banner | escape | prepend: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;}}');&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, inside a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;banner&lt;/code&gt; HTML class, the template checks if there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.logo&lt;/code&gt; image in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, which (if it is configured) is inserted as a relative URL to the site’s assets folder again.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {% if site.logo %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logo&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.logo | escape | prepend: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, the site’s title and subtitle are also pulled from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ '/' | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.title | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ site.subtitle | escape}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The navigation bar remains unchanged in it’s structure from Minima’s.&lt;/p&gt;
&lt;h4 id=&quot;footerhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/footer.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I added a copyright symbol (©) and the year to my site’s footer (the year was also added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;#169;&lt;/span&gt; {{ site.author.name | escape }} {{ site.author.copyright-year | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;socialhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/social.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;social.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I changed the included &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/minima-social-icons.svg&lt;/code&gt; to include an icon for &lt;a href=&quot;https://hackaday.io/&quot;&gt;Hackaday.io&lt;/a&gt;. Technically, the icon I included is for &lt;a href=&quot;https://hackaday.com/&quot;&gt;Hackaday.com&lt;/a&gt;, but I think it’s the more easily recognizable of the two. &lt;br /&gt;
To add it into my social icons, I simply added a single line to the list of social icons, which displays the &lt;em&gt;Hackaday&lt;/em&gt; icon with the appropriate link, if it is configured in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{%- if social.hackaday -%}&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;me&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://hackaday.io/{{ social.hackaday | cgi_escape | escape }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ social.hackaday | escape }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;svg-icon grey&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ '/assets/minima-social-icons.svg#hackaday' | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/use&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;{%- endif -%}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;adding-the-icon-for-hackadayio&quot;&gt;Adding the icon for &lt;a href=&quot;https://hackaday.io/&quot;&gt;Hackaday.io&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;I used ntembed’s &lt;a href=&quot;https://hackaday.io/project/165314-hackaday-social-media-icon&quot;&gt;Hackaday social media icon&lt;/a&gt;, and simply added the svg to Minima’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/minima-social-icons.svg&lt;/code&gt; using &lt;a href=&quot;https://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt;. As I wrote above, the icon is actually for &lt;a href=&quot;https://hackaday.com/&quot;&gt;Hackaday.com&lt;/a&gt;, but that was good enough for my purposes. &lt;br /&gt;
I then added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hackaday: UriSh&lt;/code&gt; (which is my username on &lt;a href=&quot;https://hackaday.io/urish&quot;&gt;Hackaday.io&lt;/a&gt;) to Minima v3’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;social_links:&lt;/code&gt; category, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima:&lt;/code&gt;, in Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. You can have a look at a sample &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_config.yml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;modifying-_sassminima&quot;&gt;Modifying &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/tree/master/_sass/minima&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/minima&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima’s&lt;/a&gt; latest version (v.3.0) provides a few skins, to change it’s color scheme. It also, as I wrote above, gives the user hooks to modify the theme further. This is achieved by importing a couple of empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scss&lt;/code&gt; files, one right after some initial variable assignments, then another after most of the site’s styling is defined. &lt;br /&gt;
I set up the Minima’s skin to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skin:&lt;/code&gt;&lt;i style=&quot;background-color: black; color: salmon; padding: 0 0.25rem; border-radius: 0.2rem;&quot;&gt;solarized&lt;/i&gt;, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima:&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;custom-variablesscss&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-variables.scss&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In this file one can override Minima’s defaults by reassigning certain variables. It is also possible to add custom variables, which I needed for controlling the position and styling of the navigation bar’s look and feel. &lt;br /&gt;
I first overrode the default font for the site and adding a second font for headlines, using the fonts I linked to in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/custom_head.html&lt;/code&gt;, &lt;a href=&quot;https://fonts.google.com/specimen/Alef?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=alef&quot;&gt;Alef&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Tinos?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=tinos#standard-styles&quot;&gt;Tinos&lt;/a&gt;. &lt;br /&gt;
I added a couple of navbar definitions, for background color and hover effects, linking them to Minima’s skin definitions, and I also added a couple more breaks for size, since I found out my subtitle was too long to handle the banner / navigation bar properly.&lt;/p&gt;
&lt;h4 id=&quot;custom-stylesscss&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-styles.scss&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the styling for the site’s branding, as well as the styling for other layouts I will cover in future posts. &lt;br /&gt;
First, I wanted to style code on my site in a way that will contrast the styling of other text in my site, to make it a bit more discernible. I did that by importing a stylesheet I got from &lt;a href=&quot;https://github.com/jwarby/jekyll-pygments-themes&quot;&gt;the repository&lt;/a&gt; recommended in &lt;a href=&quot;https://jekyllrb.com/docs/liquid/tags/#stylesheets-for-syntax-highlighting&quot;&gt;Jekyll’s docs&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('zenburn.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I defined the headings’ font to use &lt;a href=&quot;https://fonts.google.com/specimen/Tinos?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=tinos#standard-styles&quot;&gt;Tinos&lt;/a&gt;, and since I decided to override Minima’s skin code highlighter defaults, I also redefined the highlighted area to fit.
After that, besides importing &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/_mixins.scss&quot;&gt;some useful mixins&lt;/a&gt;, comes the actual styling for the site’s header, banner, logo, and navbar. &lt;br /&gt;
Since this is quite a long list of changes from Minima’s header, I will only list a few, and if anyone’s interested in investigating further, the file is hosted &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss&quot;&gt;here&lt;/a&gt;, or leave me a comment down below. &lt;br /&gt;
I set the area for the banner (the background image defined in &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/header.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.html&lt;/code&gt;&lt;/a&gt;) under the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-header&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$brand-color-light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;min-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.1vw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min-height&lt;/code&gt; attribute is defined to fit the WxH ratio of the banner image I used. &lt;br /&gt;
Next, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.banner&lt;/code&gt; class defines the styling for the logo, title, and subtitle. &lt;br /&gt;
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.top-nav&lt;/code&gt; class then defines the navbar, including background, position, and hover behavior. &lt;br /&gt;
The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-title&lt;/code&gt; overrides Minima’s default by disabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hover&lt;/code&gt; decoration. &lt;br /&gt;
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-nav&lt;/code&gt; class and its subclasses control the behavior of the navbar further, including it’s alignment according to window size, and also highlights and disables the link for the current page. \&lt;/p&gt;

&lt;p&gt;One thing I found important while styling my site was setting the correct breaks for window width. I added a couple more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@media&lt;/code&gt; queries under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-title&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$on-med-wide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'calc(max(14.1vw, 165px) - 1.6rem)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$on-medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$on-med-wide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'calc(max(14.1vw, 200.25px) - 1.6rem)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to allow for better positioning of the navbar, while letting the banner grow in height to fit the long subtitle I chose.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Styling &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt; v3 to follow an existing WP theme is quite straight forward mostly, though I did get into some ruts. &lt;br /&gt;
Mostly, it’s a matter of moving overriding existing definitions, and figuring out what class an element is in, in order to change it’s behavior in a couple of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt; files Minima imports by default. &lt;br /&gt;
Most of this work has been done in preparation for a more elaborate change I needed to implement, which is adding a portfolio page to this site. One of my next posts will be on that subject, as it was the driving force for moving from WP to Jekyll, even though it might not seem like an obvious decision.&lt;/p&gt;

&lt;p&gt;You can find a ready template that includes the above changes I made to Minima in &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio&quot;&gt;Jekyll-portfolio&lt;/a&gt;, which also includes the portfolio page and static commenting.&lt;/p&gt;

&lt;p&gt;If anything above is not clear, or if you find you have better ways to do what I outlined here, or if you find the template repo useful, please leave a comment.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><summary type="html">Jekyll installs with a nice, clean theme, called Minima. While there are a lot of nice themes out there, I had both a clear view in my head of what I wanted to accomplish, and ample time thanks to CoVid19. So, armed with Minima’s source and Jekyll’s documentation, I decided to have a go with modifying the theme a bit, and in this post I’ll try to outline the way I went about it.</summary></entry><entry><title type="html">New Order</title><link href="https://urishx.github.io/2019/11/21/new-order.html" rel="alternate" type="text/html" title="New Order" /><published>2019-11-21T00:00:00+00:00</published><updated>2019-11-21T00:00:00+00:00</updated><id>https://urishx.github.io/2019/11/21/new-order</id><content type="html" xml:base="https://urishx.github.io/2019/11/21/new-order.html">&lt;p&gt;I decided to separate this blog from my main website. The main reason being that I need to use the website as an online portfolio, and I did not think there’s a justification to mix in the blog and too much personal stuff in that. The other reason is that I feel more comfortable writing about technical stuff in English, and my portfolio and business pages need to be in both Hebrew and English. &lt;br /&gt;
Hope it works well, though if it doesn’t I can still probably figure out how to revert the process.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><summary type="html">I decided to separate this blog from my main website. The main reason being that I need to use the website as an online portfolio, and I did not think there’s a justification to mix in the blog and too much personal stuff in that. The other reason is that I feel more comfortable writing about technical stuff in English, and my portfolio and business pages need to be in both Hebrew and English. Hope it works well, though if it doesn’t I can still probably figure out how to revert the process.</summary></entry><entry><title type="html">NiTi Light (1/2)</title><link href="https://urishx.github.io/2019/04/07/niti-light-1-2.html" rel="alternate" type="text/html" title="NiTi Light (1/2)" /><published>2019-04-07T00:00:00+00:00</published><updated>2019-04-07T00:00:00+00:00</updated><id>https://urishx.github.io/2019/04/07/niti-light-1-2</id><content type="html" xml:base="https://urishx.github.io/2019/04/07/niti-light-1-2.html">&lt;p&gt;This post is mostly a technical documentation of a project I have done a few years ago, and have never been documented before. The reason for doing a write-up now is so I can have a step back and see where I am today, compared to a few years ago. Also, it might be interesting to others. I hope my wife, which designed the lampshade, will someday do a write-up concerning her design decisions.&lt;!--more--&gt; &lt;br /&gt;
The post concerns the first project I did which involved an embedded microcontroller. As such, it was both my first foray into programming and electronics, since about seventh grade or so (about 20 years gap). It was also done in a rush, and quite a few compromises were done along the way - some because of necessity, some because of not knowing any better. &lt;br /&gt;
&lt;img src=&quot;/assets/img/portfolio/niti-light/ezgif.com-optimize-1.gif&quot; alt=&quot;NiTi light blooming&quot; class=&quot;post-block-image&quot; /&gt; &lt;em class=&quot;post-image-desc&quot;&gt;NiTi Light blooming&lt;/em&gt; &lt;br /&gt;
About three years ago, my wife was working on her graduation project for industrial design studies, while I was going thru the sixth semester of plastic engineering. Her concept for the project was of a smart material lamp shade, using material change to infuse the object with transformation. After a long process of design exploration and experimentation, eventually my wife settled on a Nickel-Titanium (NiTi) alloy called NiTinol, which is remarkable as a shape-memory alloy. This means it can be set to a certain shape, to which it can “come back” after being deformed, and that effect is achieved through heating the NiTi alloy. &lt;br /&gt;
After settling on a material to work around, my wife than decided to construct a lamp, which eventually turned out to be a mock vase with LED-lit flowers. She also decided to use NiTinol in the form of wires. Those decisions made heating the NiTi wires quite a simple engineering problem: if the wire’s diameter, length, and resistance is known, it could be heated through resistive heating. &lt;br /&gt;
The electrical side was done in a bit of a rush, since the submission date was only a week after my exams were over. We decided to begin experimenting with the samples of Nitinol wire Aya had already purchased beforehand. The wire we had on hand was 0.5 mm diameter, 70°C phase change temperature. Aya’s design vision called for approximately 20 cm length of wire, with flower-like lampshades covering an LED module, set vertically in a clear plastic tube imitating a vase. In order to determine the power needed to raise the temperature of the Nitinol wire, we first needed to gain some understanding on the material properties. &lt;br /&gt;
&lt;img src=&quot;/assets/img/portfolio/niti-light/NiTi_light_CAD_mockup-143x300.jpg&quot; alt=&quot;NiTi light CAD mockup&quot; class=&quot;post-block-image&quot; /&gt; &lt;em class=&quot;post-image-desc&quot;&gt;NiTi light CAD mockup&lt;/em&gt; &lt;br /&gt;
A quick look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Nickel_titanium&quot;&gt;Wikipedia&lt;/a&gt; and some &lt;a href=&quot;http://www.matweb.com/search/datasheet.aspx?matguid=de9dd08433714f698d513766dccea437&amp;amp;ckck=1&quot;&gt;MatWeb&lt;/a&gt; gave me enough data to calculate the energy required to raise the temperature of the length of Nitinol wire by 45°C (ΔT = [phase change T] - [room T, approximated as 25°C]).&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;d=0.05 cm; l= 20 cm; ρ = 6.45 g/cc; C = 0.32 J/(g * K);  ΔT = 45°C Erequired = ρ * π (d^2 /4) * C * ΔT * l = 3.65 J = 3.65 W * sec \&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, since the LED modules that were available to us at the time required 12.6 V, and P=I*V, I calculated the required current to get the desired temperature change, which will happen during 3 seconds:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I =3.65 / (12.6 * 3) = 0.13 A&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I found out later, this is a very simplistic calculation, and even taking a 9X margin of error did not produce satisfying results (I chose a 3 A transformer, which still did not get the 3 wires hot enough when used together). The calculation is simplistic in three significant ways: \&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;This calculation does not take into account heat loss to the environment.&lt;/li&gt;
  &lt;li&gt;The calculation does not take into account losses due to sub-par electrical connections (I will get to that in a bit).&lt;/li&gt;
  &lt;li&gt;This calculation really should have been differential.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As it is, the calculation simply states that in an isolated environment a current of 130 mA is required to raise the temperature of the NiTi wire by 45°C, as it is seen by the viewer on the onset of the temperature gradient. &lt;br /&gt;
Since I did not know any better at the time, I decided we were good to go, and went ahead with figuring out what was needed electrically to control the heating. A friend got me his old Arduino diecimilla, Which is an older design of the Arduino development platform, and a predecessor to the most basic, standard offering of today’s Uno. The board is based on an ATmega168 microcontroller, runs on 5 V, and enough inputs and outputs for controlling the heating of three NiTi wires, light up some LEDs, and read the temperature of the wires for some measure of control. But, I guess I’m getting ahead of myself. Basically, I told my friend about the project, and he thought I might be able to pull off what my wife wanted from this board. I actually have never heard of Arduinos before approaching this project, and had limited experience in programming. I also had very little knowledge in electronics, mostly soldering kits and guitar parts. &lt;br /&gt;
Reading through some examples I figured I would need a N-channel MOSFET, connected to the Nitinol wire’s ground as sort of a “tap”, while the input will be connected straight to the 12.6 V bus. This way, I could control the current flowing through the wire using one of the Arduino pins. I also found that the correct topology for connecting the MOSFET to the Arduino would be to connect a diode between the gate and emitter. Since I wanted some level of control over the temperature change in the Nitinol wires, I decided to incorporate a LM35 temperature sensor, which could be read by the Arduino using the analog to digital converter (ADC). &lt;br /&gt;
I than went and got a few irf530 MOSFETs, some 1N4148 diodes, and complementary LM35’s from the local electronics shop. Since I had both limited knowledge and limited time on my hands, I got the parts that were available locally, for which I could get the guidance of the store owner. I then began testing heating one of the NiTi wires, using PWM to deliver current to the MOSFET gate. The Nitinol wire was pre-shaped to straighten as it’s “remembered” (austenite) state using the procedure provided by the vendor, &lt;a href=&quot;https://www.kelloggsresearchlabs.com/&quot;&gt;Kellog’s Research Labs&lt;/a&gt;, and deformed by hand when in it’s malleable (martensite) state. I then used AC screw connections to connect the NiTi wire to short conductors, since the shape changing of the wire means it cannot be soldered securely. Essentially, heat - cool cycles means the soldered connection will be stressed regularly, and will eventually come apart. &lt;br /&gt;
&lt;img src=&quot;/assets/img/portfolio/niti-light/11873483_10207063619332038_571935494369650262_n_10207063619332038-225x300.jpg&quot; alt=&quot;MOSFET and diode on breadboard&quot; class=&quot;post-block-image&quot; /&gt; &lt;em class=&quot;post-image-desc&quot;&gt;MOSFET and diode on breadboard&lt;/em&gt; &lt;br /&gt;
As is visible from the shot I took of the process (above), the breadboard did not withstand the heat provided by this rudimentary circuit, and melted slightly around the MOSFET pins - though the experiment succeeded, and I decided to move forward. &lt;br /&gt;
This has been a long write-up, and I can see now I’m not even near the end I intended, so in my next post on the subject I will go on further into how I got the NiTi wires to heat up under a bang-bang control scheme, my Arduino stripboard shield, and what I think I should have done differently in retrospect.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="projects" /><category term="prototyping" /><category term="arduino" /><summary type="html">This post is mostly a technical documentation of a project I have done a few years ago, and have never been documented before. The reason for doing a write-up now is so I can have a step back and see where I am today, compared to a few years ago. Also, it might be interesting to others. I hope my wife, which designed the lampshade, will someday do a write-up concerning her design decisions.</summary></entry><entry><title type="html">What’s on my mind, 07.04.18 edition</title><link href="https://urishx.github.io/2018/04/07/whats-on-my-mind.html" rel="alternate" type="text/html" title="What’s on my mind, 07.04.18 edition" /><published>2018-04-07T00:00:00+00:00</published><updated>2018-04-07T00:00:00+00:00</updated><id>https://urishx.github.io/2018/04/07/whats-on-my-mind</id><content type="html" xml:base="https://urishx.github.io/2018/04/07/whats-on-my-mind.html">&lt;p&gt;I kind of let the blog thing fade. I’m not a fan of documenting, I’m always thinking that what I think today might sound awful tomorrow, and that who the hell am I to actually come up with ideas, and similar debilitating thoughts. So I usually just don’t document. But… I set up this blog in the hope of actually writing down some of my thoughts, and I haven’t really used it yet, so… Here goes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I have this vision of building an easy to assemble and program DIY MIDI controller. This is supposed to be a modular system for musicians, DJ’s, sound technicians, etc., who don’t want to learn electronics or (even basic) programming.&lt;!--more--&gt; It’s supposed to be based on the Arduino platform for ease of availability and because lots of people have already heard of it. It’s supposed to be made up of several boards which will connect straight to the Arduino (shields, in the Arduino jargon), each providing a set of functions such as multiple buttons, multiple potentiometers, etc., and the programming will be done using drag-and-drop blocks, at the moment based on Ardublocks. &lt;a href=&quot;https://hackaday.io/project/109296-arduino-blocks-for-midi-controllers&quot;&gt;I’ve set up a page for that on the hackcday.io site&lt;/a&gt;, and submitted it to the 2018 Hackaday prize. &lt;br /&gt;
I’ve also set up a short poll in order to get an idea of the end users of this thing, or indeed if there are any. If you got here because of this description, &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSfz77Mw9krAfvlrnbvYPZW6ckqKkcmDMhcMsI6lma5wQEhPLw/viewform?c=0&amp;amp;w=1&quot;&gt;please fill out the short poll&lt;/a&gt;, it might help me tailor the design to what’s actually needed, not only what I wish I’ve had.&lt;/li&gt;
  &lt;li&gt;I think of learning more in-depth C/C++ for embedded design, since I think this is quite a big part of how I see myself moving forward, creating and making a niche for myself. Arduino is all well and good for what it is, but it’s mostly for easy no-brainer solutions. It’s not optimized code, physical space, and price -wise, and it constrains me to a single microcontroller ecosystem. I was thinking of both &lt;a href=&quot;https://www.udemy.com/mcu_msp430/&quot;&gt;Microcontrollers and the C Programming Language&lt;/a&gt; and then going through Prof. Bruce Land’s &lt;a href=&quot;https://www.youtube.com/playlist?list=PLD7F7ED1F3505D8D5&quot;&gt;AVR microcontroller lectures 2012 on YouTube&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;As long as I’m on subject: I’ve been looking at the &lt;a href=&quot;https://youtu.be/Z7nSgrDasEQ&quot;&gt;“Maker to Market” videos from Adafruit / Ladyada&lt;/a&gt;. As I’m trying to design my own Arduino shields ecosystem, and electronics is not really my area of expertise, it’s a real eye-opener.&lt;/li&gt;
  &lt;li&gt;I also need to get some basic Java understanding, for the Ardublock design. I still haven’t even searched for an appropriate introduction. Though I might just skip it, and go with just following the basic tutorials at the &lt;a href=&quot;http://blog.ardublock.com/category/program/&quot;&gt;Ardublocks blog&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;On the topic of the Hackaday prize, I think of putting up something I’m more familiar with for the design stage. I have this idea for a research project which will be a continuation of the engineering project I did for my final year in college. The topic of my graduation project was the use of cellulose extracted from wheat straw as filler in polypropylene matrix. You can &lt;a href=&quot;https://doi.org/10.1002/pc.24472&quot;&gt;read the article&lt;/a&gt; if you’re creative about &lt;a href=&quot;https://sci-hub.tw/&quot;&gt;how to obtain your copy&lt;/a&gt;. The gist of my follow through is this: in the process of extracting the cellulose from the straw we got rid of hemicellulose and lignin, which both act as binding agents in the plant material. I think I can maybe reconstitute some of the lignin (which is more homogonous than hemicellulose) and use it as a natural binding agent for plant based composites, such as plywood. Going further with that, I think it would be very interesting to design materials for guitar top plates using discarded veneer cut-offs and some other plant-based honeycomb, for example craft paper or corrugated cardboard, bonded with another biodegradable material which is already a byproduct of waste products (our research showed most wheat straw was regarded as waste).&lt;/li&gt;
  &lt;li&gt;Needing to vent some of my frustration and my creative side while working on engineering and design problems, I came up with an idea for a comics. Since I don’t know how to draw, I decided to do most of the work in Blender, which is a FOSS 3D animation program.&lt;/li&gt;
  &lt;li&gt;I’ve also wanted for some time now to learn python, and since Blender has a python scripting engine, I think I’ll take &lt;a href=&quot;https://www.lynda.com/Blender-tutorials/Python-Scripting-Blender/486043-2.html&quot;&gt;Blender: Python Scripting&lt;/a&gt; on lynda.com. I’ll probably have to take some foundation course as well. The Blender: Python Scripting course suggests some course that’s already changed name or even content, so I’m still looking.&lt;/li&gt;
  &lt;li&gt;Having gone through all these things - designing electronics, STEAM, the Maker to Market videos, puppeteering on Blender, python scripting - I thought of making a marionette controller for blender. I found some examples, namely what’s down at the end of &lt;a href=&quot;http://funkboxing.com/wordpress/?s=marionette&amp;amp;searchsubmit=&quot;&gt;this page&lt;/a&gt;, which make it seem feasible. It sort of goes as an expansion of the Arduino MIDI controllers, using OSC instead of MIDI, and using two accelerometers to get pitch, yaw, tilt, and (I suppose) direction - though that can be had with a magnetometer. Might be a cool little gadget I think.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OK, that’s it for now. Till next time I have a bunch of ideas needing to be written.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="projects" /><category term="general" /><summary type="html">I kind of let the blog thing fade. I’m not a fan of documenting, I’m always thinking that what I think today might sound awful tomorrow, and that who the hell am I to actually come up with ideas, and similar debilitating thoughts. So I usually just don’t document. But… I set up this blog in the hope of actually writing down some of my thoughts, and I haven’t really used it yet, so… Here goes: I have this vision of building an easy to assemble and program DIY MIDI controller. This is supposed to be a modular system for musicians, DJ’s, sound technicians, etc., who don’t want to learn electronics or (even basic) programming.</summary></entry><entry><title type="html">Engineering for the love of music</title><link href="https://urishx.github.io/2018/01/26/engineering-for-the-love-of-music.html" rel="alternate" type="text/html" title="Engineering for the love of music" /><published>2018-01-26T00:00:00+00:00</published><updated>2018-01-26T00:00:00+00:00</updated><id>https://urishx.github.io/2018/01/26/engineering-for-the-love-of-music</id><content type="html" xml:base="https://urishx.github.io/2018/01/26/engineering-for-the-love-of-music.html">&lt;p&gt;When I was about 13 I became fascinated with the design of electric guitars. My mother who is a librarian took me with her to a warehouse of a company that imported magazines from around the world to Israel. She took me there to look at comics, but I found there fascinating magazines on all kinds of subjects. There were firearms magazines, sewing magazines, magazines for car and motorcycle enthusiasts, and many other topics. The best magazines I found (and my mother bought me) were the fringe and wacky comics and musical instruments magazines.&lt;!--more--&gt; I love comics, but when I found the Guitar Shop and Vintage Guitar magazines, that was it. I was utterly fascinated by the sheer number of ways for connecting guitar effects for getting new and different sounds out of a single instrument. I was truly baffled by how many different people tried to innovate, and how what they did was unique, yet still maintained a link to the sounds of popular music. I really, really, wanted to make my own electric guitar.&lt;/p&gt;

&lt;p&gt;This desire took me on a very long journey, one that is not over yet, and which was transformed in many ways over the years. I still haven’t built an electric guitar. But I did build an acoustic one, which is far from perfect - but sounds great and is a joy to play. This journey I’m on brought me to study musicology and art history (a Bachelor’s degree I dropped out of), it brought me study and practice woodworking for some years, and after some other detours, it brought me to study engineering. I hold a B.Sc. in plastics engineering. Which is not exactly what I was going for, but at the age of 31 when I decided I was going to study engineering, I was also quite aware to the fact that I have never learned how to study - and the requirements for admission for that particular program seemed like something feasible. This “path of least resistance” reasoning worked just fine at the time, and got me finally from a point of “could have… should have…” to being able to decipher basic programming, physics, chemistry, and 3D design. This is exactly what I set out to do, so that’s a great success (high fives all around, alone in my living room). Next, is making use of this acquired knowledge to… make musical instruments!&lt;/p&gt;

&lt;p&gt;I plan (and wish) to have this blog as a place for me to write about this passion of mine. Along the (long and winding) way I took some interest in MIDI and electronic music making, ergonomics, and material and machine engineering. I am working on several projects in these areas which I intend to publish here in the coming months. It’s probably not a good idea to jinx it, but as I don’t actually believe in Lady Luck (or anything, for that matter), I can write this here: I’ts going to be awesome!&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><summary type="html">When I was about 13 I became fascinated with the design of electric guitars. My mother who is a librarian took me with her to a warehouse of a company that imported magazines from around the world to Israel. She took me there to look at comics, but I found there fascinating magazines on all kinds of subjects. There were firearms magazines, sewing magazines, magazines for car and motorcycle enthusiasts, and many other topics. The best magazines I found (and my mother bought me) were the fringe and wacky comics and musical instruments magazines.</summary></entry></feed>