<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://urishx.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://urishx.github.io/" rel="alternate" type="text/html" /><updated>2024-10-07T06:32:52+00:00</updated><id>https://urishx.github.io/feed.xml</id><title type="html">Uri Sh.</title><subtitle>A portfolio centered site with a blog, to feature my adventures and projects in  making, programming, and engineering. Built in Jekyll, to be served from Github pages.
</subtitle><author><name>Uri Shani</name><email>urish@urishx.com</email></author><entry><title type="html">Enhancing the VPN Profile Switcher: Introducing Local DB Creation and a Self-Test Tool</title><link href="https://urishx.github.io/2024/08/18/Introducing-Local-DB-Creation-and-a-Self-Test-Tool.html" rel="alternate" type="text/html" title="Enhancing the VPN Profile Switcher: Introducing Local DB Creation and a Self-Test Tool" /><published>2024-08-18T00:00:00+00:00</published><updated>2024-08-18T00:00:00+00:00</updated><id>https://urishx.github.io/2024/08/18/Introducing-Local-DB-Creation-and-a-Self-Test-Tool</id><content type="html" xml:base="https://urishx.github.io/2024/08/18/Introducing-Local-DB-Creation-and-a-Self-Test-Tool.html">&lt;p&gt;In my last post, I mentioned upcoming enhancements to the VPN Profile Switcher, and today, I’m excited to share two new scripts that take this project to the next level. These scripts not only add functionality but also pave the way for a more robust and self-sufficient toolset.&lt;/p&gt;

&lt;h4 id=&quot;1-creating-a-local-database-with-get_groups_and_countries_to_tsvsh&quot;&gt;1. Creating a Local Database with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_groups_and_countries_to_tsv.sh&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;One of the critical components of the VPN Profile Switcher is the ability to maintain an updated list of available VPN server types and countries. Previously, this information was stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; branch of the repository and updated through a GitHub action. However, this approach comes with a caveat: the GitHub action will be canceled after two months of inactivity in the repository, potentially leaving the database outdated.
&lt;!-- more --&gt;
To address this, I’ve developed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_groups_and_countries_to_tsv.sh&lt;/code&gt; script. This script enables users to generate a local database of VPN server types (like TOR and P2P) and the countries where these services are available. By running this script, you can ensure that your local database is always up-to-date, independent of the GitHub action.&lt;/p&gt;

&lt;p&gt;The script relies on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonfilter&lt;/code&gt; to mimic the functionality of the GitHub action. The action itself, housed at &lt;a href=&quot;https://github.com/UriShX/curl-then-jq-shell-action&quot;&gt;curl-then-jq-shell-action&lt;/a&gt;, utilizes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; for its operations. With this script, you no longer need to rely on the remote repository’s database, making the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; branch redundant and streamlining your setup.&lt;/p&gt;

&lt;h4 id=&quot;2-building-a-self-test-tool-with-vpn-status-checker-openwrtsh&quot;&gt;2. Building a Self-Test Tool with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vpn-status-checker-openwrt.sh&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Another essential aspect of managing VPN connections is ensuring that your VPN is functioning correctly and securely. To this end, I’ve started building a self-test tool with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vpn-status-checker-openwrt.sh&lt;/code&gt; script. This script is designed to perform basic checks such as DNS leak tests and connection status verification, similar to what you might find on the &lt;a href=&quot;https://nordvpn.com/what-is-my-ip/&quot;&gt;NordVPN What Is My IP page&lt;/a&gt;, but in a command-line interface (CLI) format.&lt;/p&gt;

&lt;p&gt;While this script is in its early stages, it lays the groundwork for a more comprehensive self-test tool that can be integrated into the VPN Profile Switcher. It’s a straightforward yet powerful way to ensure your VPN is operating as expected, providing peace of mind in an increasingly complex digital landscape.&lt;/p&gt;

&lt;h4 id=&quot;looking-ahead-wireguard-testing-and-beyond&quot;&gt;Looking Ahead: WireGuard Testing and Beyond&lt;/h4&gt;

&lt;p&gt;As I continue to enhance the VPN Profile Switcher, one area I plan to explore further is testing the connectivity and robustness of WireGuard. While I haven’t had the chance to dive into this yet, it’s on my radar, and I’m eager to see how WireGuard performs in various scenarios.&lt;/p&gt;

&lt;p&gt;In the meantime, these two scripts represent significant steps forward in making the VPN Profile Switcher more self-reliant and user-friendly. Whether you’re looking to maintain an up-to-date local database or ensure your VPN connection is secure, these tools are here to help.&lt;/p&gt;

&lt;p&gt;Stay tuned for more updates, including additional features and test results, as I continue to refine and expand the capabilities of the VPN Profile Switcher!&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="blog" /><category term="development" /><category term="shell-scripting" /><category term="openwrt" /><category term="vpn" /><summary type="html">In my last post, I mentioned upcoming enhancements to the VPN Profile Switcher, and today, I’m excited to share two new scripts that take this project to the next level. These scripts not only add functionality but also pave the way for a more robust and self-sufficient toolset. 1. Creating a Local Database with get_groups_and_countries_to_tsv.sh One of the critical components of the VPN Profile Switcher is the ability to maintain an updated list of available VPN server types and countries. Previously, this information was stored in the db branch of the repository and updated through a GitHub action. However, this approach comes with a caveat: the GitHub action will be canceled after two months of inactivity in the repository, potentially leaving the database outdated.</summary></entry><entry><title type="html">Updating the `vpn-profile-switcher.sh` to Include WireGuard Support</title><link href="https://urishx.github.io/2024/07/30/updating-the-vpn-swittching-script.html" rel="alternate" type="text/html" title="Updating the `vpn-profile-switcher.sh` to Include WireGuard Support" /><published>2024-07-30T00:00:00+00:00</published><updated>2024-07-30T00:00:00+00:00</updated><id>https://urishx.github.io/2024/07/30/updating-the-vpn-swittching-script</id><content type="html" xml:base="https://urishx.github.io/2024/07/30/updating-the-vpn-swittching-script.html">&lt;p&gt;In a recent update to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vpn-profile-switcher.sh&lt;/code&gt; script, I have added support for WireGuard, expanding its functionality beyond the initial OpenVPN compatibility. This update allows users to choose between OpenVPN and WireGuard for their VPN configurations on OpenWRT. Below, I will walk you through the changes and explain the new options and functionalities added to the script.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview-of-the-script&quot;&gt;Overview of the Script&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vpn-profile-switcher.sh&lt;/code&gt; script automates the process of retrieving the recommended NordVPN server, downloading its configuration file, setting the credentials, and configuring OpenWRT to use this server. Initially designed for OpenVPN, the script now includes support for WireGuard, a faster and more efficient VPN protocol.&lt;/p&gt;

&lt;h2 id=&quot;key-updates-for-wireguard-support&quot;&gt;Key Updates for WireGuard Support&lt;/h2&gt;

&lt;h3 id=&quot;new-options-in-the-usage-function&quot;&gt;New Options in the Usage Function&lt;/h3&gt;

&lt;p&gt;To accommodate WireGuard, new command-line options have been added:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  -t | --type &amp;lt; openvpn | wireguard &amp;gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Select either OpenVPN or WireGuard. Default is OpenVPN.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  -i | --interface &amp;lt; interface &amp;gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Specify interface to use for WireGuard. Default is 'nordlynx'. Applicable only for WireGuard.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--type&lt;/code&gt; option allows the user to select the VPN type, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openvpn&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireguard&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--interface&lt;/code&gt; option specifies the interface to use for WireGuard, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nordlynx&lt;/code&gt; as the default.&lt;/p&gt;

&lt;h3 id=&quot;verification-functions&quot;&gt;Verification Functions&lt;/h3&gt;

&lt;p&gt;Two new functions ensure that valid values are provided for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--type&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--interface&lt;/code&gt; options:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;verify_vpn_type&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wireguard&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;logger &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) VPN type must be either openvpn or wireguard, your input was: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;verify_protocol&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tcp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;udp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;logger &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) Protocol must be either udp or tcp, your input was: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fetching-recommendations&quot;&gt;Fetching Recommendations&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_recommended&lt;/code&gt; function fetches the recommended server configuration. If WireGuard is selected, it also retrieves the server’s public key:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;get_recommended&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://api.nordvpn.com/v1/servers/recommendations?&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$group_identifier&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;filters[servers_groups][identifier]=&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;group_identifier&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$country_id&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;filters[country_id]=&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;filters[servers_technologies][identifier]=&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vpn_type&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;limit=&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;recommendations_n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    logger &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) Fetching VPN recommendations from: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_url&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_url&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;recommended&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;jsonfilter &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$[0].hostname'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;recommendations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;jsonfilter &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$[*].hostname'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;jsonfilter &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$[*].load'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wireguard&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;jsonfilter &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$[0].technologies[*].metadata[*].value'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configuration-handling&quot;&gt;Configuration Handling&lt;/h3&gt;

&lt;p&gt;The script includes functions for checking existing configurations and enabling or disabling them as needed:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;check_in_configs&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;server_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;uci show openvpn | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$recommended&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;$protocol&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/config/{print $2}'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wireguard&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;server_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;uci show network | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*endpoint_host.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;recommended&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/.*_([a-z]{0,2}[0-9]{1,3}).*='&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'(.*)'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$/\1/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;check_enabled&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;enabled_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;uci show openvpn | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;enabled='1'&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/.*/{print $2}'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wireguard&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;enabled_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;uci show network | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*disabled='0'&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/.*_([a-z]{0,2}[0-9]{1,3}).*='&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.*'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$/\1/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-and-enabling-entries&quot;&gt;Creating and Enabling Entries&lt;/h3&gt;

&lt;p&gt;For WireGuard, the script creates a new entry and configures it with the appropriate parameters:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;create_new_entry&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$recommended&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/[\.\ -]/_/g'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/com/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$protocol&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/g&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;openvpn.&lt;span class=&quot;nv&quot;&gt;$new_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;openvpn
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;openvpn.&lt;span class=&quot;nv&quot;&gt;$new_server&lt;/span&gt;.config&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/openvpn/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$recommended&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$protocol&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.ovpn&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wireguard&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$recommended&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/([a-z]{2}[0-9]{1,3}).*''$/\1/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wireguard_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wg_iface&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.public_key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$public_key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.endpoint_host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$recommended&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.endpoint_port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;51820&quot;&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.persistent_keepalive&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;25&quot;&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.route_allowed_ips&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        uci add_list network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.allowed_ips&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/span&gt;
        uci add_list network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.allowed_ips&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;::/0&quot;&lt;/span&gt;
        uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_peer_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new_server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.description&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$recommended&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;restarting-services&quot;&gt;Restarting Services&lt;/h3&gt;

&lt;p&gt;Depending on the VPN type selected, the script restarts the appropriate service:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;restart_openvpn&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    uci commit openvpn
    /etc/init.d/openvpn restart
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;restart_wireguard&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    uci commit network
    /etc/init.d/network restart
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;execution&quot;&gt;Execution&lt;/h3&gt;

&lt;p&gt;Finally, the script’s main execution block processes the provided command-line arguments and invokes the necessary functions to configure the VPN:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;check_required

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        show_usage
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vpn_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;verify_vpn_type &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;verify_protocol &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;country_code &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;group_identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;server_groups &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recommendations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;recommendations_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;check_is_num &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;load_distance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;check_is_num &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--login-info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wg_iface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--db-location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;db_location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;verify_db_location &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        show_usage
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;shift
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Fetch the recommended server&lt;/span&gt;
get_recommended

&lt;span class=&quot;c&quot;&gt;# Check if the recommended server is already configured&lt;/span&gt;
check_in_configs

&lt;span class=&quot;c&quot;&gt;# Disable the current server configuration if it exists&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;disable_current_entry &lt;span class=&quot;nv&quot;&gt;$server_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a new entry for the recommended server if it doesn't already exist&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;create_new_entry
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;enable_existing_entry &lt;span class=&quot;nv&quot;&gt;$server_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Restart the appropriate VPN service&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;restart_openvpn
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wireguard&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;restart_wireguard
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Clean up and exit&lt;/span&gt;
unset_variables
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vpn-profile-switcher.sh&lt;/code&gt; script now offers robust support for both OpenVPN and WireGuard, providing flexibility and efficiency for users. This update simplifies the process of configuring VPN profiles on OpenWRT, ensuring a seamless experience regardless of the chosen VPN protocol. For more details, refer to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; branch on the &lt;a href=&quot;https://github.com/UriShX/vpn-profile-switcher/tree/dev&quot;&gt;repository on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;/2024/08/18/Introducing-Local-DB-Creation-and-a-Self-Test-Tool.html&quot;&gt;next post&lt;/a&gt;, I will cover adding some nice to have features as separate scripts, and perhaps add some test results. Stay tuned for more updates and enhancements to the VPN Profile Switcher script.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="blog" /><category term="development" /><category term="shell-scripting" /><category term="openwrt" /><category term="vpn" /><summary type="html">In a recent update to the vpn-profile-switcher.sh script, I have added support for WireGuard, expanding its functionality beyond the initial OpenVPN compatibility. This update allows users to choose between OpenVPN and WireGuard for their VPN configurations on OpenWRT. Below, I will walk you through the changes and explain the new options and functionalities added to the script.</summary></entry><entry><title type="html">Upgrading the VPN Profile Switcher Script for OpenWRT</title><link href="https://urishx.github.io/2024/07/28/upgrading-the-VPN-profile-switcher-script-for-OpenWRT.html" rel="alternate" type="text/html" title="Upgrading the VPN Profile Switcher Script for OpenWRT" /><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><id>https://urishx.github.io/2024/07/28/upgrading-the-VPN-profile-switcher-script-for-OpenWRT</id><content type="html" xml:base="https://urishx.github.io/2024/07/28/upgrading-the-VPN-profile-switcher-script-for-OpenWRT.html">&lt;p&gt;In this post, I will walk you through the process of updating and upgrading a shell script I originally wrote a few years ago for changing the VPN profile on OpenWRT routers. This script connects to NordVPN’s recommended servers, and I’ve recently added support for WireGuard (NordLynx) alongside the existing OpenVPN functionality.&lt;/p&gt;

&lt;p&gt;The original script was intended for OpenWRT installations on TP-Link Archer C20i and Raspberry Pi 3B+ with 2019 firmware. You can find the &lt;a href=&quot;https://github.com/UriShX/vpn-profile-switcher&quot;&gt;VPN Profile Switcher script here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The script queries NordVPN’s API for the recommended server and then updates the OpenVPN or WireGuard configuration on the router accordingly.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Here, I’ll discuss the upgrade process, including adding support for WireGuard, and share the essential parts of the script without exposing application-specific details.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-scripts-purpose&quot;&gt;Understanding the Script’s Purpose&lt;/h2&gt;

&lt;p&gt;The primary goal of the script is to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fetch the recommended NordVPN server using their API.&lt;/li&gt;
  &lt;li&gt;Check if the recommended profile exists on the router.&lt;/li&gt;
  &lt;li&gt;If the profile does not exist, download it and configure it with the saved username and password.&lt;/li&gt;
  &lt;li&gt;Update the router’s VPN configuration to use the new profile.&lt;/li&gt;
  &lt;li&gt;Clean up old profiles, keeping only the currently connected and previously connected profiles.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;research-and-preparation&quot;&gt;Research and Preparation&lt;/h2&gt;

&lt;p&gt;Since NordVPN started offering WireGuard servers (NordLynx) but didn’t provide a tutorial for manual connection on OpenWRT, I had to spend some time researching how to set it up. I found an &lt;a href=&quot;https://web.archive.org/web/20210127045908/https://nordvpn.com/&quot;&gt;unofficial documentation&lt;/a&gt; for NordVPN’s API long time ago, and used a &lt;a href=&quot;https://gist.github.com/bluewalk/7b3db071c488c82c604baf76a42eaad3?permalink_comment_id=5075473#gistcomment-5075473&quot;&gt;comment on a GitHub gist&lt;/a&gt; as a starting point for extracting the necessary details.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-wireguard&quot;&gt;Setting Up WireGuard&lt;/h2&gt;

&lt;p&gt;First, I set up WireGuard on my development machine (a Mac) and then ported it to OpenWRT. Since I was unfamiliar with WireGuard, this involved a lot of trial and error. I used Claude (Anthropic’s AI) to help convert cURL commands to the lighter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; command suitable for OpenWRT. Despite Claude’s help, I had to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget-ssl&lt;/code&gt; package to avoid errors from NordVPN’s servers.&lt;/p&gt;

&lt;p&gt;With the necessary data extracted using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonfilter&lt;/code&gt;, I created a WireGuard interface using LuCI, OpenWRT’s web interface. This initial success allowed me to formalize my approach in a script.&lt;/p&gt;

&lt;h2 id=&quot;script-details&quot;&gt;Script Details&lt;/h2&gt;

&lt;p&gt;Below is a simplified description of the script’s structure and logic. The actual script is more detailed and includes error handling and logging.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Check for Required Packages&lt;/strong&gt;:
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;check_packages&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     opkg list-installed wget-ssl | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; opkg list-installed curl | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
         &lt;/span&gt;logger &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) Error: either wget-ssl or curl are required to run this script. Please install either one of the packages.&quot;&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
     &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fetch Credentials&lt;/strong&gt;:
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;get_credentials&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;which curl &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
         &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;response_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; token:&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$access_token&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://api.nordvpn.com/v1/users/services/credentials&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else
         &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;response_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - &lt;span class=&quot;nt&quot;&gt;--auth-no-challenge&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;token &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$access_token&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://api.nordvpn.com/v1/users/services/credentials&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;fi
     if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
         &lt;/span&gt;logger &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;0&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Error: Failed to fetch credentials. Please check your access token and internet connection.&quot;&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
     &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Save Credentials&lt;/strong&gt;:
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;save_credentials&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vpn_type&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
         &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;jsonfilter &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response_json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@.username'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;_password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;jsonfilter &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response_json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@.password'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_username&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/openvpn/secret
         &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_password&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/openvpn/secret
     &lt;span class=&quot;k&quot;&gt;else
         &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;jsonfilter &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response_json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@.nordlynx_private_key&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
         uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;nv&quot;&gt;$wg_iface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;interface
         uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;nv&quot;&gt;$wg_iface&lt;/span&gt;.proto&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wireguard'&lt;/span&gt;
         uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;nv&quot;&gt;$wg_iface&lt;/span&gt;.private_key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_key&lt;/span&gt;
         uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;nv&quot;&gt;$wg_iface&lt;/span&gt;.listen_port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'51820'&lt;/span&gt;
         uci &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;network.&lt;span class=&quot;nv&quot;&gt;$wg_iface&lt;/span&gt;.addresses&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'10.5.0.2/32'&lt;/span&gt;
         uci commit network
     &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Script Execution&lt;/strong&gt;:
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; check_packages
 get_credentials
 save_credentials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more details, you can review the full script in the &lt;a href=&quot;https://github.com/UriShX/vpn-profile-switcher/blob/dev/get_nordvpn_credentials.sh&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post, I’ll cover the final integration of the updated script into the VPN Profile Switcher, ensuring seamless switching between OpenVPN and WireGuard profiles.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><category term="development" /><category term="shell-scripting" /><category term="openwrt" /><summary type="html">In this post, I will walk you through the process of updating and upgrading a shell script I originally wrote a few years ago for changing the VPN profile on OpenWRT routers. This script connects to NordVPN’s recommended servers, and I’ve recently added support for WireGuard (NordLynx) alongside the existing OpenVPN functionality. The original script was intended for OpenWRT installations on TP-Link Archer C20i and Raspberry Pi 3B+ with 2019 firmware. You can find the VPN Profile Switcher script here. The script queries NordVPN’s API for the recommended server and then updates the OpenVPN or WireGuard configuration on the router accordingly.</summary></entry><entry><title type="html">Integrating Machines Using Android and Python - Part 3</title><link href="https://urishx.github.io/2024/07/24/Integrating-machines-using-Android-and-Python-Part-3.html" rel="alternate" type="text/html" title="Integrating Machines Using Android and Python - Part 3" /><published>2024-07-24T00:00:00+00:00</published><updated>2024-07-24T00:00:00+00:00</updated><id>https://urishx.github.io/2024/07/24/Integrating-machines-using-Android-and-Python-Part-3</id><content type="html" xml:base="https://urishx.github.io/2024/07/24/Integrating-machines-using-Android-and-Python-Part-3.html">&lt;h3 id=&quot;overcoming-dynamic-screen-challenges-with-adb-and-appium&quot;&gt;Overcoming Dynamic Screen Challenges with ADB and Appium&lt;/h3&gt;

&lt;p&gt;When working with consumer-level machines integrated into larger systems, I faced a significant challenge: dynamic screens. These screens, which change frequently based on user interactions, made it impossible to control the machine using just ADB. This is where Appium came in handy.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;setting-up-appium-for-development&quot;&gt;Setting Up Appium for Development&lt;/h3&gt;

&lt;p&gt;Initially, I set up &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Desktop&lt;/a&gt; to explore the possibilities. This graphical interface allowed me to interact with the device and see the UI hierarchy in real-time, which was crucial for understanding how the app’s screens were structured. After gaining enough insight, I transitioned to using the Appium CLI version through NPM for more streamlined and automated control.&lt;/p&gt;

&lt;h3 id=&quot;crafting-the-adb-hierarchy-handler&quot;&gt;Crafting the ADB Hierarchy Handler&lt;/h3&gt;

&lt;p&gt;With the knowledge gained, I wrote a custom class to handle interactions with the device. This class, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADB_Hierarchy_Handler&lt;/code&gt;, encapsulates the logic for connecting to the device, parsing the UI hierarchy, and performing actions based on dynamic screen content. While I can’t share the full implementation, here’s an overview of its functionality:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Initialization and Connection&lt;/strong&gt;: The class starts the ADB server, connects to the device, and initializes Appium. If no device is found, it raises a custom error and exits.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UI Hierarchy Parsing&lt;/strong&gt;: Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmltodict&lt;/code&gt; and regular expressions, the class parses the XML representation of the UI hierarchy to locate elements dynamically.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action Execution&lt;/strong&gt;: Based on the parsed data, it performs actions such as clicking buttons or entering text.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a description of the critical sections of the class:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ppadb.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;appium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.common&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SE&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xmltodict&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ADB_Hierarchy_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ANDROID_HOME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'adb start-server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;adb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'no device attached'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no device attached to ADB server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;appium_server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'appium'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;caps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;platformName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Android&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;automationName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UiAutomator2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;skipServerInstallation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;disableWindowAnimation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:4723/wd/hub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_ui_hierarchy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_source&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmltodict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_dict&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_recursively&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;click_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_bounds_as_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'@bounds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;utilizing-helper-functions-for-parsing&quot;&gt;Utilizing Helper Functions for Parsing&lt;/h3&gt;

&lt;p&gt;I leveraged several helper functions to streamline the process of parsing the UI hierarchy and extracting necessary information:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bounds_regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d+),(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d+)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d+),(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d+)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_recursively&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fields_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fields_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_recursively&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fields_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;more_results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_recursively&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;fields_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields_found&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_bounds_as_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds_regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'top'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bottom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coordinates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bottom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'top'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'top'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coordinates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wrapping-up-and-testing&quot;&gt;Wrapping Up and Testing&lt;/h3&gt;

&lt;p&gt;The class includes a main test case to ensure everything works as expected:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADB_Hierarchy_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ui_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_ui_hierarchy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ui_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'desired_element_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;An error occurred: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code initializes the handler, parses the UI hierarchy, finds the desired element by its ID, and clicks it. This approach enabled me to automate interactions with the device efficiently, overcoming the challenges posed by dynamic screens without relying on OpenCV.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Through the use of Appium and careful parsing of the UI hierarchy, I successfully automated the control of machines with dynamic screens. This solution proved robust and adaptable, paving the way for more efficient integration of consumer-level machines into larger systems.&lt;/p&gt;

&lt;p&gt;I also believe that using Appium and a virtual device runnning on the PC controlling the robot could have been a better solution for the first machine, instead of the unused cell phone we used to get that working. I should have tried to get it going, but I didn’t have the time to revive the old machine and tinker with it. I’ll definitely consider it for future projects.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><category term="development" /><summary type="html">Overcoming Dynamic Screen Challenges with ADB and Appium When working with consumer-level machines integrated into larger systems, I faced a significant challenge: dynamic screens. These screens, which change frequently based on user interactions, made it impossible to control the machine using just ADB. This is where Appium came in handy.</summary></entry><entry><title type="html">Openwrt On Raspberry Pi For Shell Script Development</title><link href="https://urishx.github.io/2024/07/11/OpenWRT-on-raspberry-pi-for-shell-script-development.html" rel="alternate" type="text/html" title="Openwrt On Raspberry Pi For Shell Script Development" /><published>2024-07-11T00:00:00+00:00</published><updated>2024-07-11T00:00:00+00:00</updated><id>https://urishx.github.io/2024/07/11/OpenWRT-on-raspberry-pi-for-shell-script-development</id><content type="html" xml:base="https://urishx.github.io/2024/07/11/OpenWRT-on-raspberry-pi-for-shell-script-development.html">&lt;h3 id=&quot;setting-up-an-openwrt-dev-environment-on-a-raspberry-pi-3-b&quot;&gt;Setting Up an OpenWRT Dev Environment on a Raspberry Pi 3 B+&lt;/h3&gt;

&lt;p&gt;It’s been a while since I last tinkered with something fun, but I finally got around to setting up an OpenWRT development environment on my Raspberry Pi 3 B+. This time, it’s for version 2 of my VPN profile switcher script, which you can find on my &lt;a href=&quot;https://github.com/urishx/vpn-profile-switcher&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: this post is about setting up a shell script dev environment on OpenWRT, not an actual OpenWRT development environment. For that, please follow the official &lt;a href=&quot;https://openwrt.org/docs/guide-developer/start&quot;&gt;developer’s guide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;
&lt;h3 id=&quot;flashing-openwrt&quot;&gt;Flashing OpenWRT&lt;/h3&gt;

&lt;p&gt;To start, I obtained the most recent &lt;a href=&quot;https://openwrt.org/toh/raspberry_pi_foundation/raspberry_pi&quot;&gt;OpenWRT image for the Raspberry Pi&lt;/a&gt; and flashed it onto an SD card. The process was simple - download the image, use Balena Etcher, and you’re ready to proceed. Afterward, I powered on the Pi, set a password, and added my SSH keys from my main machine. It’s important to prioritize security and accessibility, isn’t it?&lt;/p&gt;

&lt;p&gt;To make sure I had enough space for everything, I followed OpenWRT’s guide to &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/installation_methods/sd_card#expanding_the_filesystem&quot;&gt;expand the filesystem&lt;/a&gt; for ext4. This step is crucial, especially if you plan on installing packages or running scripts.&lt;/p&gt;

&lt;p&gt;For some reason, I had to also install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e2fsck&lt;/code&gt; as well, so my process is as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update
opkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;parted tune2fs resize2fs e2fsck

parted
p
resizepart 2 8GB &lt;span class=&quot;c&quot;&gt;# or whatever size you want&lt;/span&gt;
q

mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; remount,ro /                  &lt;span class=&quot;c&quot;&gt;#Remount root as Read Only&lt;/span&gt;
tune2fs &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt;^resize_inode /dev/mmcblk0p2    &lt;span class=&quot;c&quot;&gt;#Remove reserved GDT blocks&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This failed, so I had to run e2fsck&lt;/span&gt;
e2fsck &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /dev/mmcblk0p2                &lt;span class=&quot;c&quot;&gt;#Answer yes to all questions&lt;/span&gt;
tune2fs &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt;^resize_inode /dev/mmcblk0p2    &lt;span class=&quot;c&quot;&gt;#Remove reserved GDT blocks&lt;/span&gt;
fsck.ext4 /dev/mmcblk0p2                  &lt;span class=&quot;c&quot;&gt;#Fix part, answer yes to remove GDT blocks remnants&lt;/span&gt;
reboot

&lt;span class=&quot;c&quot;&gt;# After reboot&lt;/span&gt;
resize2fs /dev/mmcblk0p2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wifi-hotspot-and-wan-setup&quot;&gt;WiFi Hotspot and WAN Setup&lt;/h3&gt;

&lt;p&gt;Next, I turned the Pi into a WiFi hotspot and set the ethernet port as WAN. This means the Pi can share its internet connection wirelessly while staying wired to my main router.&lt;/p&gt;

&lt;p&gt;I actually tried to set up the wireless interface on the pi as a STA (client) + AP (master), but it didn’t work out. I ended up using the USB WiFi adapter as a WWAN instead. You can find some threads on the topic &lt;a href=&quot;https://forum.openwrt.org/t/how-to-configure-raspberry-pi-3b-as-a-repeater/46202/14&quot;&gt;here&lt;/a&gt;, and some more info on the &lt;a href=&quot;https://openwrt.org/packages/pkgdata/travelmate&quot;&gt;travelmate&lt;/a&gt; &lt;a href=&quot;https://forum.openwrt.org/t/travelmate-support-thread/5155/755&quot;&gt;support thread&lt;/a&gt;. &lt;em&gt;Apperantly it is possible w/ Raspoberry pi OS, here’s a &lt;a href=&quot;https://raspberrypi.stackexchange.com/questions/89803/access-point-as-wifi-router-repeater-optional-with-bridge&quot;&gt;how-to&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;adding-a-wifi-wwan&quot;&gt;Adding a WiFi WWAN&lt;/h3&gt;

&lt;p&gt;Now, for a bit of fun – I had a spare TL-822N USB WiFi adapter and decided to add a WiFi WWAN. I followed what worked for someone &lt;a href=&quot;https://forum.openwrt.org/t/configuring-tl-wn822n-usb-wifi-adapter/60889/6&quot;&gt;on the OpenWRT forum&lt;/a&gt;, but ran into some issues with the adapter repeatedly failing to connect. After some head-scratching, I figured it might be a power issue. Swapped out the power supply for a beefier 3W one - and the problem was solved.&lt;/p&gt;

&lt;p&gt;So, assuming you have a beefy enough power supply, install the following packages:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update
opkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kmod-usb2 rtl8192eu-firmware kmod-rtl8xxxu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;why-the-wwan&quot;&gt;Why the WWAN?&lt;/h4&gt;

&lt;p&gt;You might wonder why go through the hassle of adding a WWAN. Well, I wanted to keep the ethernet port on my main router free and have a ready-to-use travel router for future adventures.&lt;/p&gt;

&lt;h3 id=&quot;getting-openvpn-running&quot;&gt;Getting OpenVPN Running&lt;/h3&gt;

&lt;p&gt;With the networking sorted, it was time to get OpenVPN up and running with NordVPN. I followed my own instructions from the &lt;a href=&quot;https://github.com/urishx/vpn-profile-switcher#readme&quot;&gt;repo’s README&lt;/a&gt; – always nice when past me makes things easier for future me.&lt;/p&gt;

&lt;h3 id=&quot;ssh-convenience&quot;&gt;SSH Convenience&lt;/h3&gt;

&lt;p&gt;To make my life easier, I ensured my SSH connection was rock-solid and installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt; on the Pi. On my main machine, I set up the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Kelvin.vscode-sshfs&quot;&gt;SSH FS&lt;/a&gt; extension in VS Code and installed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssh-sftp-server&lt;/code&gt; package on the Pi, following OpenWRT’s documentation. This setup lets me edit files on the Pi directly from VS Code, which provides some useful quality of life features, such as switching between files easily, syntax highlighting, and Copilot.&lt;/p&gt;

&lt;h3 id=&quot;final-touches&quot;&gt;Final Touches&lt;/h3&gt;

&lt;p&gt;Lastly, I installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-http&lt;/code&gt; packages on the Pi so I could clone and manage repos directly. With everything in place, my OpenWRT dev environment was ready to roll.&lt;/p&gt;

&lt;h4 id=&quot;edit-2024-07-24&quot;&gt;Edit: 2024-07-24&lt;/h4&gt;

&lt;p&gt;When trying to work on the script on the Pi, I had a bit of trouble pushing the changes to the repo. I decided to set up a new SSH key on the Pi and add it to my GitHub account. This way, I could push changes without any issues. Sicne the default SSH agentt on tthe standard OpenWRT is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dropbear&lt;/code&gt;, I followed &lt;a href=&quot;https://openwrt.org/docs/guide-user/security/dropbear.public-key.auth#generating_public_and_private_keys_on_the_openwrt_machine&quot;&gt;this how-to&lt;/a&gt; on the OpenWRT wiki. Here’s how I did it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/.ssh
dropbearkey &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/id_dropbear
dropbearkey &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/id_dropbear
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then copied the public key to my GitHub account and added the private key to my SSH agent. This way, I could push changes to the repo without any issues.&lt;/p&gt;

&lt;p&gt;I also set the username and email for the git config:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;yourname@your.domain&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had trouble working with source control from my remote &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshfs&lt;/code&gt; connection, so I decided to clone the repo directly to the Pi. This way, I could work on the script without any issues. That’s a bit of a bummer, but it’s a small price to pay for a stable development environment.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h3&gt;

&lt;p&gt;So there you have it – a solid OpenWRT development environment on a Raspberry Pi 3 B+. Perfect for freeing up your main router’s ethernet connection or having a travel-ready router. Happy tinkering!&lt;/p&gt;

&lt;p&gt;Cheers,
Uri&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="raspberry-pi" /><category term="openwrt" /><summary type="html">Setting Up an OpenWRT Dev Environment on a Raspberry Pi 3 B+ It’s been a while since I last tinkered with something fun, but I finally got around to setting up an OpenWRT development environment on my Raspberry Pi 3 B+. This time, it’s for version 2 of my VPN profile switcher script, which you can find on my GitHub repo. Note: this post is about setting up a shell script dev environment on OpenWRT, not an actual OpenWRT development environment. For that, please follow the official developer’s guide</summary></entry><entry><title type="html">Integrating Machines Using Android and Python - Part 2</title><link href="https://urishx.github.io/2022/01/21/Integrating-machines-using-Android-and-Python-Part-2.html" rel="alternate" type="text/html" title="Integrating Machines Using Android and Python - Part 2" /><published>2022-01-21T00:00:00+00:00</published><updated>2022-01-21T00:00:00+00:00</updated><id>https://urishx.github.io/2022/01/21/Integrating-machines-using-Android-and-Python-Part-2</id><content type="html" xml:base="https://urishx.github.io/2022/01/21/Integrating-machines-using-Android-and-Python-Part-2.html">&lt;p&gt;For the next iteration of our machine, a different machine was selected because the first one wasn’t quite up to the task. Besides functioning poorly (for our purposes, at least), the Bluetooth connection wasn’t reliable enough.&lt;/p&gt;

&lt;p&gt;Asking around, one of the entrepreneurs’ CTO heard of a (supposedly) better machine that had been “hacked” by one of the distributor’s clients.
&lt;!-- more --&gt;
A few days passed, and we got to play with a new (secondhand) machine, already half disassembled by one of the mechanical engineers already modeling its parts.&lt;/p&gt;

&lt;h2 id=&quot;first-thoughts-again&quot;&gt;First thoughts, again&lt;/h2&gt;

&lt;p&gt;Since the machine’s electronics were mostly out, I first tried figuring out what’s what. I found a microcontroller board at the back of the machine, and found that it was driven by a microcontroller I sort of know - STM32F103. I tried figuring out what each IO was doing, and doing so I found the TX/RX lines going to the touch screen at the front of the machine. I then followed SparkFun’s tutorial on &lt;a href=&quot;https://learn.sparkfun.com/tutorials/using-the-usb-logic-analyzer-with-sigrok-pulseview/all&quot;&gt;using a logic analyzer with Sigrok&lt;/a&gt;, to capture the UART comm.&lt;/p&gt;

&lt;p&gt;At this point my goal was to record the communication sent back and forth between the uC and the touch screen, and to figure out how to trigger certain functions.&lt;/p&gt;

&lt;p&gt;It turned out to be a good learning experience, but not a worthwhile one. The communication protocol used in this particular machine was too complicated for me to decipher, as it was using what seemed to be changing in length with every operation. Without some prior knowledge about the communication scheme, it seemed like a lot of work was still ahead of me if I were to continue down this road.&lt;/p&gt;

&lt;p&gt;As the communication seemed too complex to replicate, I took another look at the machine. I found that what I assumed to be only a touch screen had actually a full microprocessor board driving it. When I first looked at the disassembled machine, I thought the whole machine was being driven by some firmware running on the STM32 board, and that the UART communication to the touch display was to a daughter board. But finding that the other board was sporting a microprocessor, in what seemed to be a smartphone development board form, changed my perspective. I was now thinking that the smartphone dev board was the actual computer doing the heavy lifting, while the STM32 board was functioning as a peripheral to it.&lt;/p&gt;

&lt;p&gt;I shared my findings with the consultant who suggested we use Macrodroid for the first machine. He suggested we start the machine and prod around the GUI on the touch screen to get a sense of what was the OS running behind the scenes. He also suggested it would probably be Android of some sort, as it was relatively easy to get that working as a touch screen UI for the machine.&lt;/p&gt;

&lt;p&gt;It took a while, but eventually, I got to the machine’s settings by trying to set the system language for the UI. It seems the developers of the GUI decided to use the OS language settings, and so I could confirm it was running a recent enough Android system.&lt;/p&gt;

&lt;p&gt;I also talked with the distributor, and through him got to the guy who “hacked” the machine prior to me. The last guy got to about where I got, by prodding the UI of the machine set in his office. But this guy got blocked by the distributor’s password - whereas in the case of my machine the distributor had unlocked it specifically for our use.&lt;/p&gt;

&lt;h3 id=&quot;stay-tuned&quot;&gt;Stay Tuned&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;/2024/07/24/Integrating-machines-using-Android-and-Python-Part-3.html&quot;&gt;next post&lt;/a&gt;, I will cover how I used ADB and Appium to overcome the challenges posed by the dynamic screens of the second machine. Stay tuned for a detailed walkthrough of the process and the final solution!&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><category term="development" /><summary type="html">For the next iteration of our machine, a different machine was selected because the first one wasn’t quite up to the task. Besides functioning poorly (for our purposes, at least), the Bluetooth connection wasn’t reliable enough. Asking around, one of the entrepreneurs’ CTO heard of a (supposedly) better machine that had been “hacked” by one of the distributor’s clients.</summary></entry><entry><title type="html">Integrating Machines Using Android and Python - Part 1</title><link href="https://urishx.github.io/2022/01/11/Integrating-machines-using-Android-and-Python-Part-1.html" rel="alternate" type="text/html" title="Integrating Machines Using Android and Python - Part 1" /><published>2022-01-11T00:00:00+00:00</published><updated>2022-01-11T00:00:00+00:00</updated><id>https://urishx.github.io/2022/01/11/Integrating-machines-using-Android-and-Python-Part-1</id><content type="html" xml:base="https://urishx.github.io/2022/01/11/Integrating-machines-using-Android-and-Python-Part-1.html">&lt;p&gt;As part of working for an engineering firm, I sometimes need to integrate machines into a system designed by one of the firm’s mechanical engineers. This could be part of a POC, so we can move things a bit quicker. Or it could be part of our final product - integrating proven products into our designs means we can focus on getting the final machines built quicker, and less prone to errors. This is done on a regular basis in different disciplines of engineering. In mechanical engineering, a lot of designs integrate standard parts such as bearings or motors, for example. In electronics engineering, relying on pre-built modules in designs could save a lot of hassle.&lt;/p&gt;

&lt;p&gt;But in this one machine we’re building, I needed to integrate a couple of different machines that required a different set of skills, since they were (definitely) not meant to be included in any larger machine - and that’s what I want to write about.
&lt;!--more--&gt;
In this particular machine, we needed to incorporate a consumer-level machine into our bigger system. We ended up incorporating two different machines, one for the POC, and a different one for the first real iteration of the machine.&lt;/p&gt;

&lt;h2 id=&quot;what-are-my-options-anyway&quot;&gt;What are my options, anyway?&lt;/h2&gt;

&lt;p&gt;There are a few different options for controlling machines that have Android interfaces.&lt;/p&gt;

&lt;p&gt;I’ve had a bit of a hard time figuring out how to get it working, so I wrote it down. Mostly, to not have to search for answers again in the future.&lt;/p&gt;

&lt;p&gt;These options include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automate the machine through macros I wrote with webhooks, controlling an app designed by the machine manufacturer, running on a phone hidden inside our machine.&lt;/li&gt;
  &lt;li&gt;Automate the machine by recording UART between the controller and the UI device (started, deemed too hard).&lt;/li&gt;
  &lt;li&gt;Automate the machine by reverse engineering the controller firmware (never tried, &lt;em&gt;WAYYYY&lt;/em&gt; too hard for the specific machine).&lt;/li&gt;
  &lt;li&gt;Automate the machine by leveraging ADB:
    &lt;ul&gt;
      &lt;li&gt;Blindly.&lt;/li&gt;
      &lt;li&gt;UIAutomator (deprecated by Google, works only for static content).&lt;/li&gt;
      &lt;li&gt;OpenCV pattern matching (last resort).&lt;/li&gt;
      &lt;li&gt;Appium (UIAutomator2 driver, FOSS, QA tool).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-first-machine&quot;&gt;The first machine&lt;/h2&gt;

&lt;p&gt;The first machine was selected thanks to its ability to be controlled remotely via an Android app that sent commands through Bluetooth.&lt;/p&gt;

&lt;h3 id=&quot;initial-probing&quot;&gt;Initial probing&lt;/h3&gt;

&lt;p&gt;Since I knew it was Bluetooth-based, I first tried sniffing the communication, using Wireshark and Nordic nRF. I ordered an nRF52840 Feather from &lt;a href=&quot;https://www.adafruit.com/product/4062&quot;&gt;Adafruit&lt;/a&gt;, and followed Adafruit’s great &lt;a href=&quot;https://learn.adafruit.com/ble-sniffer-with-nrf52840?view=all&quot;&gt;guide&lt;/a&gt; for installing and using that to sniff BLE communication between the machine and the application installed on my phone. I also used Nordic’s own &lt;a href=&quot;https://www.nordicsemi.com/Products/Development-tools/nrf-connect-for-mobile&quot;&gt;nRF Connect&lt;/a&gt; on my phone (there’s a desktop app as well) to see the BLE descriptors as well.&lt;/p&gt;

&lt;p&gt;But while looking at the sniffed packets I realized the machine was only advertising its existence through BLE, then (probably) moving onto the more secure Bluetooth Classic communication for actually being controlled through the accompanying smartphone app.&lt;/p&gt;

&lt;p&gt;A quick look through the code for the app (apk packages can mostly be unzipped) convinced us it was time to think of a simpler way for controlling this particular machine.&lt;/p&gt;

&lt;h3 id=&quot;second-best---but-winning&quot;&gt;Second best - but winning&lt;/h3&gt;

&lt;p&gt;As a quicker method to get the POC rolling, a consultant suggested we try installing a macro app for Android. Specifically, he suggested we use &lt;a href=&quot;https://www.macrodroid.com/&quot;&gt;Macrodroid&lt;/a&gt;, since he’s had good results using it in the past.&lt;/p&gt;

&lt;p&gt;The process was quite simple, if a bit tedious. I found a disposable phone from an earlier project, installed the application for controlling the machine as well as Macrodroid, and started setting up a macro that would start the app, wait for a bit, then press the desired button on the second page, then delay again, and finally the third button.&lt;/p&gt;

&lt;p&gt;For selecting textual buttons, Macrodroid offers a search functionality. For moving sliders around, I enabled Android’s Pointer Location in the Developer’s options, and set up moving the slider based on the actual display of the device I used.&lt;/p&gt;

&lt;p&gt;Finally, I set up a webhook with some query parameters to trigger the macro on the device - and my part of the job was done.&lt;/p&gt;

&lt;p&gt;I passed the webhook addresses and the parameters to the guy writing the rest of the machine’s controller, made sure the phone was always on and had its Bluetooth, location, and WiFi, always on (and with power), and went on to the next project.&lt;/p&gt;

&lt;h3 id=&quot;stay-tuned&quot;&gt;Stay Tuned&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;/2022/01/21/Integrating-machines-using-Android-and-Python-Part-2.html&quot;&gt;next post&lt;/a&gt;, I’ll cover the next iteration of the machine, and how I had to use a (very) different approach to get it working. Stay tuned for a detailed walkthrough of the process and the final solution!&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><category term="development" /><summary type="html">As part of working for an engineering firm, I sometimes need to integrate machines into a system designed by one of the firm’s mechanical engineers. This could be part of a POC, so we can move things a bit quicker. Or it could be part of our final product - integrating proven products into our designs means we can focus on getting the final machines built quicker, and less prone to errors. This is done on a regular basis in different disciplines of engineering. In mechanical engineering, a lot of designs integrate standard parts such as bearings or motors, for example. In electronics engineering, relying on pre-built modules in designs could save a lot of hassle. But in this one machine we’re building, I needed to integrate a couple of different machines that required a different set of skills, since they were (definitely) not meant to be included in any larger machine - and that’s what I want to write about.</summary></entry><entry><title type="html">Customizing Jekyll With A Portfolio</title><link href="https://urishx.github.io/2021/01/20/Customizing-Jekyll-with-a-Portfolio.html" rel="alternate" type="text/html" title="Customizing Jekyll With A Portfolio" /><published>2021-01-20T00:00:00+00:00</published><updated>2021-01-20T00:00:00+00:00</updated><id>https://urishx.github.io/2021/01/20/Customizing-Jekyll-with-a-Portfolio</id><content type="html" xml:base="https://urishx.github.io/2021/01/20/Customizing-Jekyll-with-a-Portfolio.html">&lt;p&gt;In my &lt;a href=&quot;/2020/12/16/Customizing-Jekyll's-default-theme.html&quot;&gt;last post&lt;/a&gt; 
I detailed how I used &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and the the new version (3) of the &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt; theme, to style my site so that it looked similar to the WordPress team’s &lt;a href=&quot;https://wordpress.org/themes/twentythirteen/&quot;&gt;Twentythirteen theme&lt;/a&gt;. &lt;br /&gt;
In this post, I am going to outline how I created a new layout portfolio that could showcase any project of my making/tinkering/engineering/enginerding - be it a woodworking project, a mechanical contraption, or a Python script.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;design-considerations&quot;&gt;Design considerations&lt;/h3&gt;
&lt;p&gt;The portfolio layout started with a basic need. I wanted portfolio to keep the layout I was using on my WordPress site, which uses a paid plugin called &lt;a href=&quot;https://wpsofts.com/&quot;&gt;GridKit&lt;/a&gt;. I was quite happy with the layout this plugin allowed me to have, but I wanted a bit more. &lt;br /&gt;
&lt;img src=&quot;/assets/img/wp_portfolio_snapshot_201020.png&quot; alt=&quot;My WordPress portfolio using GridKit&quot; class=&quot;post-block-image&quot; /&gt; &lt;em class=&quot;post-image-desc&quot;&gt;My WordPress portfolio using GridKit&lt;/em&gt; &lt;br /&gt;
First, I wanted to be able to display code snippets and projects’ readme’s. Second, I wanted to have a better understanding of how things were built. Third, though the plugin has got a free version, I found that it was not enough for what I wanted to display, and it was costing me money. &lt;br /&gt;
So, I set out to find how I could display a grid of pictures representing my projects, with a description scrolling from the top of each grid box describing the specific project on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:hover&lt;/code&gt;, then on a click to open a modal displaying the project’s content - be it a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt;, a code snippet, or pictures. &lt;br /&gt;
&lt;img src=&quot;/assets/img/wp_portfolio_modal_snapshot_201020.png&quot; alt=&quot;GridKit portfolio modal&quot; class=&quot;post-block-image&quot; /&gt; &lt;em class=&quot;post-image-desc&quot;&gt;GridKit portfolio modal&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;finding-solutions&quot;&gt;Finding solutions&lt;/h3&gt;
&lt;h4 id=&quot;using-jekylls-structure-and-yaml-front-matter&quot;&gt;Using Jekyll’s structure and YAML front matter&lt;/h4&gt;
&lt;p&gt;I started out with adding a &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collection&lt;/a&gt; to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, then adding a new layout, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/portfolio.html&lt;/code&gt;. A new page, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portfolio.md&lt;/code&gt; was also added, as well as some markdown files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_portfolio/&lt;/code&gt; folder, describing the project and adding some content for the new layout to parse. The example below is of one the projects, and displays nicely a lot of the capabilities. It has a title, and some cover picture, and a text displaying the project in a few words. It also has tags, so the layout can group several projects sharing the same tag for the person viewing the portfolio to filter by, and a link to the project’s web page (in this case a github repository for the project). The last part of the yaml front matter is an array containing pictures, code, or markdown, to be rendered in the specific project’s modal.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ble_slider_web_app_2.png&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Web-BLE&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;esp32&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sketches&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iot control&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/UriShX/ESP32_fader&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://raw.githubusercontent.com/UriShX/ESP32_fader/master/readme.md&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ble_slider_web_app_2.png&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ble_slider_web_app_1.png&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;A web-ble responsive web app to demonstrate control over BLE of ESP32 projects.&lt;/span&gt; 
&lt;span class=&quot;s&quot;&gt;Includes links to github repo of web app, and to a couple of ESP32 sketches for testing.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, when displaying code, my layout needs a bit more information, so an object specifying the language to be displayed and whether line numbers should be rendered is also required. That is since code in one language can sometimes contain bits in some other language, such as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; page contained inside an embedded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; code, &lt;a href=&quot;https://github.com/UriShX/portfolio/blob/master/Roboclaw_control_over_ESP32_with_AP_for_control/roboclaw_esp32_w_AP_and_config.ino&quot;&gt;for example&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://raw.githubusercontent.com/UriShX/portfolio/master/Roboclaw_control_over_ESP32_with_AP_for_control/roboclaw_esp32_w_AP_and_config.ino&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cpp&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# - linenos: linenos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;adding-modals&quot;&gt;Adding modals&lt;/h4&gt;
&lt;p&gt;The two main characteristics of the &lt;a href=&quot;https://wpsofts.com/&quot;&gt;GridKit&lt;/a&gt; portfolio I had on my WP site were its general layout, and that each project was displayed in its own modal window. Laying out the projects in a grid and animating their display is done through Jekyll’s own structure, and detailed below. But I had to come up with a way to display each project’s content in it’s own modal, which is not part of the theme I was using, &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started out looking for a ready-made solution, and my search parameters were threefold:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I wanted a modal library that will use the least amount of JavaScript - so, mostly implemented in CSS.&lt;/li&gt;
  &lt;li&gt;I wanted the modal library to be either pure CSS, or - preferably - in &lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;I also did not want to include a whole CSS framework, mostly because I wanted to use the existing layout of the Minima theme.&lt;/li&gt;
  &lt;li&gt;And, naturally, I would prefer a library that will have ample examples, and is developed enough to use in production.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Searching Google got me to &lt;a href=&quot;https://drublic.github.io/css-modal/&quot;&gt;CSS-Modal&lt;/a&gt;, which checked all the boxes. All I had to do was figure out how to use it in my new layout. I copied it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt; files into Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/&lt;/code&gt; folder (under a fitting subfolder, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/drublic-css-modal/&lt;/code&gt;), and it’s few JS utilities into Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; folder, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/script&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;importing-and-displaying-remote-code&quot;&gt;Importing and displaying remote code&lt;/h4&gt;
&lt;p&gt;As I wrote above, I wanted to add the ability to display projects that consist of code or &lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;markdown&lt;/a&gt; files. Simply put, not all of my projects have a visual element to them, but I still wanted to display them in a way that will be similar to the more visually- centric projects. &lt;br /&gt;
I wanted to use Jekyll’s statically built structure to my advantage, and import all the code snippets and MD files at build time. That way, the site contains all of it’s components, and can even be displayed off-line quite easily, which can be important when displaying my work in places with bad internet connection. In those cases, the site can be displayed directly from my phone’s cache.&lt;/p&gt;

&lt;p&gt;For achieving that, I had to use a couple of Jekyll plugins. &lt;br /&gt;
The first one because Jekyll’s &lt;a href=&quot;https://jekyllrb.com/docs/includes/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include_relative&lt;/code&gt;&lt;/a&gt; tags were designed to include HTML files in layouts, and not content - thus they allow only for including files from the current Jekyll project. &lt;br /&gt;
The second plugin was needed to allow passing parameters to Jekyll’s &lt;a href=&quot;https://jekyllrb.com/docs/liquid/tags/#code-snippet-highlighting&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highlight&lt;/code&gt;&lt;/a&gt; tag, in a similar way to what’s possible with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; tags. Jekyll uses &lt;a href=&quot;http://rouge.jneen.net/&quot;&gt;Rouge&lt;/a&gt; to format code snippets, and it does so quite intelligently, figuring out the code’s language from its’ syntax. Since some of my projects mix languages (as I wrote above, HTML code in an embedded C program, for eg.), or use non standard file extensions (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pde&lt;/code&gt; for &lt;a href=&quot;https://processing.org/&quot;&gt;Processing&lt;/a&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ino&lt;/code&gt; for &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt;), I wanted to have the same control over the rendered language as for the source itself.&lt;/p&gt;

&lt;p&gt;I searched &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; for Jekyll plugins that could quite fill my requirements, but couldn’t find any ‘out of the box’ solutions, so I set about adapting and writing some code.&lt;/p&gt;

&lt;p&gt;For including files, I found &lt;a href=&quot;https://rubygems.org/gems/jekyll-remote-include&quot;&gt;jekyll-remote-include&lt;/a&gt;. This plugin can include a remote file in a similar way to Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; tag already, but I wanted to add to it a capability. I wanted to be able to use Liquid to render my portfolio from a template, so each included remote source should be passed on as a variable. To achieve that, I forked the plugin’s repository, and added a begin/rescue block (which is Ruby’s way of calling a &lt;em&gt;try/catch&lt;/em&gt; block). In this block the plugin simply tries to parse the URI from the given parameter, and if it fails, it tries to parse the URI as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; variable. That seems to work in a decent enough manner, so &lt;a href=&quot;https://github.com/netrics/jekyll-remote-include/pull/2&quot;&gt;I opened a PR&lt;/a&gt; with my addition, which I hope will be merged to the plugin repo some day. In the meantime, my revised plugin can be found &lt;a href=&quot;https://github.com/UriShX/jekyll-remote-include/tree/context-variables&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for passing variables to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highlight&lt;/code&gt; tag, I &lt;strong&gt;really&lt;/strong&gt; couldn’t find what I was looking for as a plugin, so I set about writing my own, or rather re-writing Jekyll’s &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/lib/jekyll/tags/highlight.rb&quot;&gt;mainline implementation&lt;/a&gt;. My first implementation was pretty rough. I basically tried to use the same method as I did with the remote-include plugin, using a &lt;em&gt;begin/rescue&lt;/em&gt; block, but that only got me part way to my goal. What it actually do is fail gracefully, by checking if the code is a context variable, and trying to parse it. If it cannot do that, the code simply continues as the mainline tag does. Once I figured that didn’t quite do what I was expecting it to do, I set about implementing a better model for selecting the route to go by. &lt;br /&gt;
Implementing a better model for detecting the passed parameters required a change to the &lt;a href=&quot;https://ruby-doc.org/core-2.7.1/Regexp.html&quot;&gt;regular expression&lt;/a&gt; in the tag’s code. I wanted the syntax to be as close to Jekyll’s implementation of Liquid, so my implementation is looking for curly braces to filter passed variables, and if it does not find any - it considers the parameter as a constant. That means backwards compatibility is maintained with Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highlight&lt;/code&gt; tag, while allowing for variables to be passed. I opened a &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/8290&quot;&gt;feature request&lt;/a&gt; for that in Jekyll’s repository, but I haven’t opened a PR yet. My implementation can be found on rubygems.org as &lt;a href=&quot;https://rubygems.org/gems/jekyll-highlight-param&quot;&gt;jekyll-highlight-param&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adding the plugins into a Jekyll site is quite simple, by directing the Gemfile to pull straight from Github:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 4.1&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minima&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jekyll/minima'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#:git =&amp;gt; &quot;git@github.com:jekyll/minima.git&quot; # github v.3.0, latest build is 2.5.1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-remote-include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UriShX/jekyll-remote-include'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'context-variables'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#:git =&amp;gt; &quot;git@github.com:UriShX/jekyll-remote-include.git&quot;, :branch =&amp;gt; &quot;context-variables&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-highlight-param&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UriShX/jekyll-highlight-param'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#:git =&amp;gt; &quot;git@github.com:UriShX/jekyll-highlight-param.git&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note, that to direct a plugin to a specific branch (like to my revised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-remote-include&lt;/code&gt; plugin, which accepts variables, and is not yet merged to the main plugin repo), it is possible to pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:branch =&amp;gt;&lt;/code&gt; to the gem.&lt;/p&gt;

&lt;h3 id=&quot;building-up-the-page&quot;&gt;building up the page&lt;/h3&gt;
&lt;h4 id=&quot;building-the-page-using-liquid&quot;&gt;Building the page using Liquid&lt;/h4&gt;

&lt;p&gt;Building a portfolio from a &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collection&lt;/a&gt; and a bunch of markdown was a bit convoluted. I used quite a lot of flow control logic, checking whether the collection was indeed a portfolio, looking through the files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_portfolio&lt;/code&gt; directory, pulling the content of each (the text describing the project), and creating a modal for each sort of project - code based, a markdown file, a picture gallery, a combination of those, or even none at all. I then arranged the projects (programatically) by order of their place in Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, and push the projects that were found in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_portfolio&lt;/code&gt; folder but were not in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; to be sorted alphabetically at the end of the portfolio. &lt;br /&gt;
Cover images and tags are also pulled from the project’s front matter, and by using some icons from Google’s Material Design &lt;a href=&quot;https://material.io/resources/icons/?style=baseline&quot;&gt;Icons&lt;/a&gt;, (linked to in &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/custom-head.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/custom-head.html&lt;/code&gt;&lt;/a&gt;), links and modals are linked to each graphical representation of a project.&lt;/p&gt;

&lt;p&gt;Most of the modal code for image galleries is based on &lt;a href=&quot;https://github.com/drublic/css-modal/tree/master/examples&quot;&gt;the examples&lt;/a&gt; for the &lt;a href=&quot;https://drublic.github.io/css-modal/&quot;&gt;CSS modal library&lt;/a&gt; I used. With some Liquid &lt;a href=&quot;https://shopify.github.io/liquid/tags/control-flow/&quot;&gt;control logic&lt;/a&gt;, and with the aid of the two plugins I wrote of above, creating a nice modal view of markdown and code files was not that difficult to implement also.&lt;/p&gt;

&lt;p&gt;The whole portfolio layout can be found in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-portfolio&lt;/code&gt; repository, under &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_layouts/portfolio.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/portfolio.html&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;layout-using-sass&quot;&gt;Layout using Sass&lt;/h4&gt;

&lt;p&gt;Since I’m using &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt; v.3, it was quite easy to link the &lt;a href=&quot;https://drublic.github.io/css-modal/&quot;&gt;CSS modal&lt;/a&gt; library. All that’s needs to be done was linking the modal library’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt; files, which I placed under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/drublic-css-modal&lt;/code&gt;, into Minima’s &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss#L6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/minima/custom-styles.scss&lt;/code&gt;&lt;/a&gt;, under an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@import&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;The rest of the portfolio styling can be found on lines &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss#L226&quot;&gt;226&lt;/a&gt; onward:&lt;/p&gt;

&lt;p&gt;I then used the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot;&gt;CSS grid layout&lt;/a&gt; to style the layout of the &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss#L266&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.portfolio-wrapper&lt;/code&gt;&lt;/a&gt; class, in a similar way to how &lt;a href=&quot;https://wpsofts.com/&quot;&gt;GridKit&lt;/a&gt; styles portfolios.&lt;/p&gt;

&lt;p&gt;Some more styling for each &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss#L326&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.portfolio-block&lt;/code&gt;&lt;/a&gt; class to get the zoom-in and sliding animations for the text and links, darkening the background when a modal is open, as well as creating a satisfying layout for narrow screens such as phones, and that was it.&lt;/p&gt;

&lt;h4 id=&quot;filtering-using-js&quot;&gt;Filtering using JS&lt;/h4&gt;

&lt;p&gt;Finally, I needed a way to filter the projects by some key words. I used Jekyll’s &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;tags&lt;/a&gt; to group them using Liquid in &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_layouts/portfolio.html#L10&quot;&gt;_layouts/portfolio.html&lt;/a&gt;, then &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_layouts/portfolio.html#L20&quot;&gt;display the tags&lt;/a&gt; on top of the portfolio blocks.&lt;/p&gt;

&lt;p&gt;I then wrote a &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/assets/script/portfolio-tag-filter.js&quot;&gt;short JS script&lt;/a&gt; for querying the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a href&lt;/code&gt; links created by the Jekyll layout, generating an array of links to projects, and by adding an event listener to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashchange&lt;/code&gt;&lt;/a&gt; event, hiding or revealing the projects with the appropriate tags.&lt;/p&gt;

&lt;p&gt;The script uses a mix of ES5 and ES6, though I believe it is quite easy to read and understand. I made a conscious decision to not provide support for older browsers, so using modern JS is easier for me.&lt;/p&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;This has been a really long post, so I think I’ll end here. The whole layout can be found on the repository I opened for it, called &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio&quot;&gt;jekyll-portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Writing my own implementation for a portfolio layout in Jekyll was quite a learning experience. I still have some ways to go, as I still need to figure out a better way for sizing images better, and perhaps adding a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps&quot;&gt;PWA&lt;/a&gt; capability.&lt;/p&gt;

&lt;p&gt;Besides that, the versioning for &lt;a href=&quot;https://github.com/UriShX/jekyll-highlight-param&quot;&gt;jekyll-highlight-param&lt;/a&gt;’s does not follow the &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt; scheme, and my additions to &lt;a href=&quot;https://github.com/UriShX/jekyll-remote-include/tree/context-variables&quot;&gt;jekyll-remote-include&lt;/a&gt; need some refining.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><category term="portfolio" /><summary type="html">In my last post I detailed how I used Jekyll and the the new version (3) of the Minima theme, to style my site so that it looked similar to the WordPress team’s Twentythirteen theme. In this post, I am going to outline how I created a new layout portfolio that could showcase any project of my making/tinkering/engineering/enginerding - be it a woodworking project, a mechanical contraption, or a Python script.</summary></entry><entry><title type="html">Customizing Jekyll&amp;#8217;s Default Theme</title><link href="https://urishx.github.io/2020/12/16/Customizing-Jekyll's-default-theme.html" rel="alternate" type="text/html" title="Customizing Jekyll&amp;#8217;s Default Theme" /><published>2020-12-16T00:00:00+00:00</published><updated>2020-12-16T00:00:00+00:00</updated><id>https://urishx.github.io/2020/12/16/Customizing-Jekyll's-default-theme</id><content type="html" xml:base="https://urishx.github.io/2020/12/16/Customizing-Jekyll's-default-theme.html">&lt;p&gt;Jekyll installs with a nice, clean theme, called &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;. While there are &lt;em&gt;a lot&lt;/em&gt; of nice themes out there, I had both a clear view in my head of what I wanted to accomplish, and ample time thanks to CoVid19. So, armed with &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima’s&lt;/a&gt; source and &lt;a href=&quot;https://jekyllrb.com/docs/themes/&quot;&gt;Jekyll’s documentation&lt;/a&gt;, I decided to have a go with modifying the theme a bit, and in this post I’ll try to outline the way I went about it.
&lt;!--more--&gt;
I started off with the latest version of the &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;, even though it’s not published as a stable version, and is not what you get ‘out of the box’ when you get when you start a new site with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new &amp;lt;PATH&amp;gt;&lt;/code&gt; command. The main reason for that was that I had more of a desire for understanding how Jekyll themes were built, rather than a ‘getting the job done’ approach. So, I cloned the theme from its Github repository, and started to modify the way things looked and felt, to better fit my desired look and feel. If you’d like to follow along, you would need to change your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; to point to Minima’s Github repository, like so:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &quot;minima&quot;, :github =&amp;gt; 'jekyll/minima' # github v.3.0, latest build is 2.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Set your theme on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt; from the command line.&lt;/p&gt;
&lt;h3 id=&quot;design-goals&quot;&gt;Design goals&lt;/h3&gt;
&lt;p&gt;I wanted my site to maintain the general look and feel of my existing WordPress blog, which uses the WordPress team’s &lt;a href=&quot;https://wordpress.org/themes/twentythirteen/&quot;&gt;Twentythirteen theme&lt;/a&gt;. &lt;br /&gt;
&lt;img src=&quot;/assets/img/wp_blog_snapshot_211020.png&quot; alt=&quot;My existing WordPress blog&quot; class=&quot;post-block-image&quot; /&gt; &lt;em class=&quot;post-image-desc&quot;&gt;My existing WordPress blog&lt;/em&gt; &lt;br /&gt;
Starting with the general layout of this theme, I wanted to have a header that will showcase the site’s name, some subtitle with the site’s motto, a logo, and to have all that in front of some colorful banner. I grabbed the banner straight from the WP theme I was using, re-designed my site’s logo, and started working on the layout.&lt;/p&gt;
&lt;h2 id=&quot;modifying-minima&quot;&gt;Modifying Minima&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima’s&lt;/a&gt; latest (unreleased) version, v.3.0, has got some nice features for easy customization. It imports some empty files while rendering both the theme’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default.html&lt;/code&gt; layout as well when compiling &lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt;) files. This complements Jekyll’s [theme building process]](https://jekyllrb.com/docs/themes/) nicely, as it allows the user to only modify what’s needed, without needing to copy and paste whole files. I found out that worked great with styling, but needed to make quite a few changes in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; HTML files, since there was no easy way for changing the page layouts themselves without that. &lt;br /&gt;
You can click on the filename in the headings to go to the file the paragraph describes.&lt;/p&gt;
&lt;h3 id=&quot;modifying-_includes&quot;&gt;Modifying &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;custom-headhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/custom-head.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-head.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This file is really all you need to change if all you want is a slightly different look and feel, and some basic branding. This file is included in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section in the generated site, so including a favicon, for example, is perfect here. I decided to change the fonts, so I grabbed the cdn link from &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google fonts&lt;/a&gt; for two fonts I like (and used on my old site) - &lt;a href=&quot;https://fonts.google.com/specimen/Alef?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=alef&quot;&gt;Alef&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Tinos?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=tinos#standard-styles&quot;&gt;Tinos&lt;/a&gt;. These two fonts were originally selected since they both support Hebrew as well as English (and other European languages), though I don’t intend to implement Hebrew on this site in the near future. I just sorta got used to them in my old site, and decided to keep them. &lt;br /&gt;
Those fonts will simply override Minima’s default font, by reassigning some variables in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/minma/custom-variables.scss&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;headerhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/header.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Starting off from the top of the page, the branding for my site consists of a banner, which features my name, a subtitle, the site’s logo, and a navigation bar. Those are all inserted through &lt;a href=&quot;https://jekyllrb.com/docs/liquid/&quot;&gt;Liquid&lt;/a&gt; tags, pulled from either Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, or from the Jekyll’s structure. &lt;br /&gt;
The banner itself is a css background, using Liquid to insert a relative URL from the site’s assets folder:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-image: url('{{ site.banner | escape | prepend: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;}}');&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, inside a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;banner&lt;/code&gt; HTML class, the template checks if there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.logo&lt;/code&gt; image in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, which (if it is configured) is inserted as a relative URL to the site’s assets folder again.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {% if site.logo %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logo&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.logo | escape | prepend: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, the site’s title and subtitle are also pulled from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ '/' | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.title | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ site.subtitle | escape}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The navigation bar remains unchanged in it’s structure from Minima’s.&lt;/p&gt;
&lt;h4 id=&quot;footerhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/footer.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I added a copyright symbol (©) and the year to my site’s footer (the year was also added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;#169;&lt;/span&gt; {{ site.author.name | escape }} {{ site.author.copyright-year | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;socialhtml&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/social.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;social.html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I changed the included &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/minima-social-icons.svg&lt;/code&gt; to include an icon for &lt;a href=&quot;https://hackaday.io/&quot;&gt;Hackaday.io&lt;/a&gt;. Technically, the icon I included is for &lt;a href=&quot;https://hackaday.com/&quot;&gt;Hackaday.com&lt;/a&gt;, but I think it’s the more easily recognizable of the two. &lt;br /&gt;
To add it into my social icons, I simply added a single line to the list of social icons, which displays the &lt;em&gt;Hackaday&lt;/em&gt; icon with the appropriate link, if it is configured in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{%- if social.hackaday -%}&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;me&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://hackaday.io/{{ social.hackaday | cgi_escape | escape }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ social.hackaday | escape }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;svg-icon grey&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ '/assets/minima-social-icons.svg#hackaday' | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/use&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;{%- endif -%}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;adding-the-icon-for-hackadayio&quot;&gt;Adding the icon for &lt;a href=&quot;https://hackaday.io/&quot;&gt;Hackaday.io&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;I used ntembed’s &lt;a href=&quot;https://hackaday.io/project/165314-hackaday-social-media-icon&quot;&gt;Hackaday social media icon&lt;/a&gt;, and simply added the svg to Minima’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/minima-social-icons.svg&lt;/code&gt; using &lt;a href=&quot;https://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt;. As I wrote above, the icon is actually for &lt;a href=&quot;https://hackaday.com/&quot;&gt;Hackaday.com&lt;/a&gt;, but that was good enough for my purposes. &lt;br /&gt;
I then added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hackaday: UriSh&lt;/code&gt; (which is my username on &lt;a href=&quot;https://hackaday.io/urish&quot;&gt;Hackaday.io&lt;/a&gt;) to Minima v3’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;social_links:&lt;/code&gt; category, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima:&lt;/code&gt;, in Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. You can have a look at a sample &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_config.yml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;modifying-_sassminima&quot;&gt;Modifying &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/tree/master/_sass/minima&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/minima&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima’s&lt;/a&gt; latest version (v.3.0) provides a few skins, to change it’s color scheme. It also, as I wrote above, gives the user hooks to modify the theme further. This is achieved by importing a couple of empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scss&lt;/code&gt; files, one right after some initial variable assignments, then another after most of the site’s styling is defined. &lt;br /&gt;
I set up the Minima’s skin to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skin:&lt;/code&gt;&lt;i style=&quot;background-color: black; color: salmon; padding: 0 0.25rem; border-radius: 0.2rem;&quot;&gt;solarized&lt;/i&gt;, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima:&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;custom-variablesscss&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-variables.scss&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In this file one can override Minima’s defaults by reassigning certain variables. It is also possible to add custom variables, which I needed for controlling the position and styling of the navigation bar’s look and feel. &lt;br /&gt;
I first overrode the default font for the site and adding a second font for headlines, using the fonts I linked to in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/custom_head.html&lt;/code&gt;, &lt;a href=&quot;https://fonts.google.com/specimen/Alef?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=alef&quot;&gt;Alef&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Tinos?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=tinos#standard-styles&quot;&gt;Tinos&lt;/a&gt;. &lt;br /&gt;
I added a couple of navbar definitions, for background color and hover effects, linking them to Minima’s skin definitions, and I also added a couple more breaks for size, since I found out my subtitle was too long to handle the banner / navigation bar properly.&lt;/p&gt;
&lt;h4 id=&quot;custom-stylesscss&quot;&gt;&lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-styles.scss&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the styling for the site’s branding, as well as the styling for other layouts I will cover in future posts. &lt;br /&gt;
First, I wanted to style code on my site in a way that will contrast the styling of other text in my site, to make it a bit more discernible. I did that by importing a stylesheet I got from &lt;a href=&quot;https://github.com/jwarby/jekyll-pygments-themes&quot;&gt;the repository&lt;/a&gt; recommended in &lt;a href=&quot;https://jekyllrb.com/docs/liquid/tags/#stylesheets-for-syntax-highlighting&quot;&gt;Jekyll’s docs&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('zenburn.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I defined the headings’ font to use &lt;a href=&quot;https://fonts.google.com/specimen/Tinos?preview.text=&amp;amp;preview.text_type=custom&amp;amp;query=tinos#standard-styles&quot;&gt;Tinos&lt;/a&gt;, and since I decided to override Minima’s skin code highlighter defaults, I also redefined the highlighted area to fit.
After that, besides importing &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/_mixins.scss&quot;&gt;some useful mixins&lt;/a&gt;, comes the actual styling for the site’s header, banner, logo, and navbar. &lt;br /&gt;
Since this is quite a long list of changes from Minima’s header, I will only list a few, and if anyone’s interested in investigating further, the file is hosted &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_sass/minima/custom-styles.scss&quot;&gt;here&lt;/a&gt;, or leave me a comment down below. &lt;br /&gt;
I set the area for the banner (the background image defined in &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio/blob/master/_includes/header.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.html&lt;/code&gt;&lt;/a&gt;) under the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-header&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$brand-color-light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;min-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.1vw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min-height&lt;/code&gt; attribute is defined to fit the WxH ratio of the banner image I used. &lt;br /&gt;
Next, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.banner&lt;/code&gt; class defines the styling for the logo, title, and subtitle. &lt;br /&gt;
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.top-nav&lt;/code&gt; class then defines the navbar, including background, position, and hover behavior. &lt;br /&gt;
The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-title&lt;/code&gt; overrides Minima’s default by disabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hover&lt;/code&gt; decoration. &lt;br /&gt;
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-nav&lt;/code&gt; class and its subclasses control the behavior of the navbar further, including it’s alignment according to window size, and also highlights and disables the link for the current page. \&lt;/p&gt;

&lt;p&gt;One thing I found important while styling my site was setting the correct breaks for window width. I added a couple more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@media&lt;/code&gt; queries under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.site-title&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$on-med-wide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'calc(max(14.1vw, 165px) - 1.6rem)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$on-medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$on-med-wide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'calc(max(14.1vw, 200.25px) - 1.6rem)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to allow for better positioning of the navbar, while letting the banner grow in height to fit the long subtitle I chose.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Styling &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt; v3 to follow an existing WP theme is quite straight forward mostly, though I did get into some ruts. &lt;br /&gt;
Mostly, it’s a matter of moving overriding existing definitions, and figuring out what class an element is in, in order to change it’s behavior in a couple of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt; files Minima imports by default. &lt;br /&gt;
Most of this work has been done in preparation for a more elaborate change I needed to implement, which is adding a portfolio page to this site. One of my next posts will be on that subject, as it was the driving force for moving from WP to Jekyll, even though it might not seem like an obvious decision.&lt;/p&gt;

&lt;p&gt;You can find a ready template that includes the above changes I made to Minima in &lt;a href=&quot;https://github.com/UriShX/Jekyll-portfolio&quot;&gt;Jekyll-portfolio&lt;/a&gt;, which also includes the portfolio page and static commenting.&lt;/p&gt;

&lt;p&gt;If anything above is not clear, or if you find you have better ways to do what I outlined here, or if you find the template repo useful, please leave a comment.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><summary type="html">Jekyll installs with a nice, clean theme, called Minima. While there are a lot of nice themes out there, I had both a clear view in my head of what I wanted to accomplish, and ample time thanks to CoVid19. So, armed with Minima’s source and Jekyll’s documentation, I decided to have a go with modifying the theme a bit, and in this post I’ll try to outline the way I went about it.</summary></entry><entry><title type="html">New Order</title><link href="https://urishx.github.io/2019/11/21/new-order.html" rel="alternate" type="text/html" title="New Order" /><published>2019-11-21T00:00:00+00:00</published><updated>2019-11-21T00:00:00+00:00</updated><id>https://urishx.github.io/2019/11/21/new-order</id><content type="html" xml:base="https://urishx.github.io/2019/11/21/new-order.html">&lt;p&gt;I decided to separate this blog from my main website. The main reason being that I need to use the website as an online portfolio, and I did not think there’s a justification to mix in the blog and too much personal stuff in that. The other reason is that I feel more comfortable writing about technical stuff in English, and my portfolio and business pages need to be in both Hebrew and English. &lt;br /&gt;
Hope it works well, though if it doesn’t I can still probably figure out how to revert the process.&lt;/p&gt;</content><author><name>Uri Shani</name><email>urish@urishx.com</email></author><category term="general" /><category term="blog" /><summary type="html">I decided to separate this blog from my main website. The main reason being that I need to use the website as an online portfolio, and I did not think there’s a justification to mix in the blog and too much personal stuff in that. The other reason is that I feel more comfortable writing about technical stuff in English, and my portfolio and business pages need to be in both Hebrew and English. Hope it works well, though if it doesn’t I can still probably figure out how to revert the process.</summary></entry></feed>